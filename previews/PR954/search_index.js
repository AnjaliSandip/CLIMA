var documenterSearchIndex = {"docs":
[{"location":"CodingConventions/#Coding-Conventions-1","page":"Coding Conventions","title":"Coding Conventions","text":"","category":"section"},{"location":"CodingConventions/#","page":"Coding Conventions","title":"Coding Conventions","text":"A list of recommended coding conventions.","category":"page"},{"location":"CodingConventions/#","page":"Coding Conventions","title":"Coding Conventions","text":"There are good recommendations in the Julia style-guide:\nhttps://docs.julialang.org/en/v1/manual/style-guide/index.html\nhttps://docs.julialang.org/en/v0.6/manual/packages/#Guidelines-for-naming-a-package-1\nPlease only use Unicode characters that are within our list of acceptable Unicode characters (in AcceptableUnicode.md).\nModules, and class names (structs), should follow TitleCase convention. Note that class names cannot coincide with module names.\nFunction names should be lowercase, with words separated by underscores as necessary to improve readability.\nVariable names follow the format used in the VariableList. In addition, follow CMIP conventions (http://clipc-services.ceda.ac.uk/dreq/) where possible and practicable.\nMake names consistent, distinctive, and meaningful.\nDocument design and purpose, rather than mechanics and implementation (document interfaces and embed documentation in code).\nAvoid variable names that coincide with module and class names, as well as function/variable names that are natively supported.\nNever use the characters 'l' (lowercase letter el), 'O' (uppercase letter oh), or 'I' (uppercase letter eye) as single character variable names.\nTwo white spaces are used for indent. This is not part of the standard convention, but recent development efforts have been using this indentation style (e.g., Google's Tensorflow), and this style is being used here also.\nKISS (keep it simple stupid).\nTry to limit all lines to a maximum of 79 characters.\nSingle access point - if a variable/constant is defined more than once, then move it into a module and import (or \"using\") to that module to access the variable in order to enforce a single access point (to avoid consistency issues). Any time a chunk of code is used more than once, or when several similar versions exist across the codebase, consider generalizing this functionality and using a new function to avoid replicating code\n\"import\"/\"using\" should be grouped in the following order:\nStandard library imports.\nRelated third party imports.\nLocal application/library specific imports.\nUse a blank line between each group of imports.","category":"page"},{"location":"CodingConventions/#Why-do-we-limit-our-Unicode-use?-1","page":"Coding Conventions","title":"Why do we limit our Unicode use?","text":"","category":"section"},{"location":"CodingConventions/#","page":"Coding Conventions","title":"Coding Conventions","text":"Some characters are visibly indistinguishable. Capital \"a\" and capital alpha are visibly indistinguishable, but are recognized as separate characters (e.g., search distinguishable).\nSome characters are difficult to read. Sometimes, the overline/overdot/hats overlap with characters making them difficult to see.\nPortability issues. Unicode does not render in Jupyter notebook natively (on OSX).\nIf it does improve readability enough, and are not worried about portability, we may introduce a list of permissible characters that are commonly used.","category":"page"},{"location":"Mesh/#Meshing-Stuff-1","page":"Mesh","title":"Meshing Stuff","text":"","category":"section"},{"location":"Mesh/#","page":"Mesh","title":"Mesh","text":"CurrentModule = CLIMA.Mesh","category":"page"},{"location":"Mesh/#Topologies-1","page":"Mesh","title":"Topologies","text":"","category":"section"},{"location":"Mesh/#","page":"Mesh","title":"Mesh","text":"Topologies encode the connectivity of the elements, spatial domain interval and MPI communication.","category":"page"},{"location":"Mesh/#Types-1","page":"Mesh","title":"Types","text":"","category":"section"},{"location":"Mesh/#","page":"Mesh","title":"Mesh","text":"Topologies.AbstractTopology\nTopologies.BoxElementTopology\nTopologies.BrickTopology\nTopologies.StackedBrickTopology\nTopologies.CubedShellTopology\nTopologies.StackedCubedSphereTopology","category":"page"},{"location":"Mesh/#CLIMA.Mesh.Topologies.AbstractTopology","page":"Mesh","title":"CLIMA.Mesh.Topologies.AbstractTopology","text":"AbstractTopology{dim}\n\nRepresents the connectivity of individual elements, with local dimension dim.\n\n\n\n\n\n","category":"type"},{"location":"Mesh/#CLIMA.Mesh.Topologies.BoxElementTopology","page":"Mesh","title":"CLIMA.Mesh.Topologies.BoxElementTopology","text":"BoxElementTopology{dim, T} <: AbstractTopology{dim}\n\nThe local topology of a larger MPI-distributed topology, represented by dim-dimensional box elements.\n\nThis contains the necessary information for the connectivity elements of the elements on the local process, along with \"ghost\" elements from neighbouring processes.\n\nFields\n\nmpicomm\nMPI communicator for communicating with neighbouring processes.\n\nelems\nRange of element indices\n\nrealelems\nRange of real (aka nonghost) element indices\n\nghostelems\nRange of ghost element indices\n\nghostfaces\nGhost element to face is received; ghostfaces[f,ge] == true if face f of ghost element ge is received.\n\nsendelems\nArray of send element indices\n\nsendfaces\nSend element to face is sent; sendfaces[f,se] == true if face f of send element se is sent.\n\ninteriorelems\nArray of real elements that do not have a ghost element as a neighbor.\n\nexteriorelems\nArray of real elements that have at least on ghost element as a neighbor.\nNote that this is different from sendelems because sendelems duplicates elements that need to be sent to multiple neighboring processes.\n\nelemtocoord\nElement to vertex coordinates; elemtocoord[d,i,e] is the dth coordinate of corner i of element e\nnote: Note\ncurrently coordinates always are of size 3 for (x1, x2, x3)\n\nelemtoelem\nElement to neighboring element; elemtoelem[f,e] is the number of the element neighboring element e across face f.  If there is no neighboring element then elemtoelem[f,e] == e.\n\nelemtoface\nElement to neighboring element face; elemtoface[f,e] is the face number of the element neighboring element e across face f.  If there is no neighboring element then elemtoface[f,e] == f.\"\n\nelemtoordr\nelement to neighboring element order; elemtoordr[f,e] is the ordering number of the element neighboring element e across face f.  If there is no neighboring element then elemtoordr[f,e] == 1.\n\nelemtobndy\nElement to boundary number; elemtobndy[f,e] is the boundary number of face f of element e.  If there is a neighboring element then elemtobndy[f,e] == 0.\n\nnabrtorank\nList of the MPI ranks for the neighboring processes\n\nnabrtorecv\nRange in ghost elements to receive for each neighbor\n\nnabrtosend\nRange in sendelems to send for each neighbor\n\norigsendorder\noriginal order in partitioning\n\nhasboundary\nboolean for whether or not this topology has a boundary\n\n\n\n\n\n","category":"type"},{"location":"Mesh/#CLIMA.Mesh.Topologies.BrickTopology","page":"Mesh","title":"CLIMA.Mesh.Topologies.BrickTopology","text":"BrickTopology{dim, T} <: AbstractTopology{dim}\n\nA simple grid-based topology. This is a convenience wrapper around BoxElementTopology.\n\n\n\n\n\n","category":"type"},{"location":"Mesh/#CLIMA.Mesh.Topologies.StackedBrickTopology","page":"Mesh","title":"CLIMA.Mesh.Topologies.StackedBrickTopology","text":"StackedBrickTopology{dim, T} <: AbstractTopology{dim}\n\nA simple grid-based topology, where all elements on the trailing dimension are stacked to be contiguous. This is a convenience wrapper around BoxElementTopology.\n\n\n\n\n\n","category":"type"},{"location":"Mesh/#CLIMA.Mesh.Topologies.CubedShellTopology","page":"Mesh","title":"CLIMA.Mesh.Topologies.CubedShellTopology","text":"CubedShellTopology{T} <: AbstractTopology{2}\n\nA cube-shell topology. This is a convenience wrapper around BoxElementTopology.\n\n\n\n\n\n","category":"type"},{"location":"Mesh/#CLIMA.Mesh.Topologies.StackedCubedSphereTopology","page":"Mesh","title":"CLIMA.Mesh.Topologies.StackedCubedSphereTopology","text":"StackedCubedSphereTopology{3, T} <: AbstractTopology{3}\n\nA cube-sphere topology. All elements on the same \"vertical\" dimension are stacked to be contiguous. This is a convenience wrapper around BoxElementTopology.\n\n\n\n\n\n","category":"type"},{"location":"Mesh/#Constructors-1","page":"Mesh","title":"Constructors","text":"","category":"section"},{"location":"Mesh/#","page":"Mesh","title":"Mesh","text":"Topologies.BrickTopology(mpicomm, Nelems)\nTopologies.StackedBrickTopology(mpicomm, elemrange)\nTopologies.CubedShellTopology(mpicomm, Neside, T)\nTopologies.StackedCubedSphereTopology(mpicomm, Nhorz, Rrange)","category":"page"},{"location":"Mesh/#CLIMA.Mesh.Topologies.BrickTopology-Tuple{Any,Any}","page":"Mesh","title":"CLIMA.Mesh.Topologies.BrickTopology","text":"BrickTopology{dim, T}(mpicomm, elemrange; boundary, periodicity)\n\nGenerate a brick mesh topology with coordinates given by the tuple elemrange and the periodic dimensions given by the periodicity tuple.\n\nThe elements of the brick are partitioned equally across the MPI ranks based on a space-filling curve.\n\nBy default boundary faces will be marked with a one and other faces with a zero.  Specific boundary numbers can also be passed for each face of the brick in boundary.  This will mark the nonperiodic brick faces with the given boundary number.\n\nExamples\n\nWe can build a 3 by 2 element two-dimensional mesh that is periodic in the x2-direction with\n\n\nusing CLIMA.Topologies\nusing MPI\nMPI.Init()\ntopology = BrickTopology(MPI.COMM_SELF, (2:5,4:6);\n                         periodicity=(false,true),\n                         boundary=((1,2),(3,4)))\n\nThis returns the mesh structure for\n\n         x2\n\n          ^\n          |\n         6-  +-----+-----+-----+\n          |  |     |     |     |\n          |  |  3  |  4  |  5  |\n          |  |     |     |     |\n         5-  +-----+-----+-----+\n          |  |     |     |     |\n          |  |  1  |  2  |  6  |\n          |  |     |     |     |\n         4-  +-----+-----+-----+\n          |\n          +--|-----|-----|-----|--> x1\n             2     3     4     5\n\nFor example, the (dimension by number of corners by number of elements) array elemtocoord gives the coordinates of the corners of each element.\n\njulia> topology.elemtocoord\n2×4×6 Array{Int64,3}:\n[:, :, 1] =\n 2  3  2  3\n 4  4  5  5\n\n[:, :, 2] =\n 3  4  3  4\n 4  4  5  5\n\n[:, :, 3] =\n 2  3  2  3\n 5  5  6  6\n\n[:, :, 4] =\n 3  4  3  4\n 5  5  6  6\n\n[:, :, 5] =\n 4  5  4  5\n 5  5  6  6\n\n[:, :, 6] =\n 4  5  4  5\n 4  4  5  5\n\nNote that the corners are listed in Cartesian order.\n\nThe (number of faces by number of elements) array elemtobndy gives the boundary number for each face of each element.  A zero will be given for connected faces.\n\njulia> topology.elemtobndy\n4×6 Array{Int64,2}:\n 1  0  1  0  0  0\n 0  0  0  0  2  2\n 0  0  0  0  0  0\n 0  0  0  0  0  0\n\nNote that the faces are listed in Cartesian order.\n\n\n\n\n\n","category":"method"},{"location":"Mesh/#CLIMA.Mesh.Topologies.StackedBrickTopology-Tuple{Any,Any}","page":"Mesh","title":"CLIMA.Mesh.Topologies.StackedBrickTopology","text":"StackedBrickTopology{dim, T}(mpicomm, elemrange; boundary, periodicity)\n\nGenerate a stacked brick mesh topology with coordinates given by the tuple elemrange and the periodic dimensions given by the periodicity tuple.\n\nThe elements are stacked such that the elements associated with range elemrange[dim] are contiguous in the element ordering.\n\nThe elements of the brick are partitioned equally across the MPI ranks based on a space-filling curve.  Further, stacks are not split at MPI boundaries.\n\nBy default boundary faces will be marked with a one and other faces with a zero.  Specific boundary numbers can also be passed for each face of the brick in boundary.  This will mark the nonperiodic brick faces with the given boundary number.\n\nExamples\n\nWe can build a 3 by 2 element two-dimensional mesh that is periodic in the x2-direction with\n\n\nusing CLIMA.Topologies\nusing MPI\nMPI.Init()\ntopology = StackedBrickTopology(MPI.COMM_SELF, (2:5,4:6);\n                                periodicity=(false,true),\n                                boundary=((1,2),(3,4)))\n\nThis returns the mesh structure stacked in the x2-direction for\n\n         x2\n\n          ^\n          |\n         6-  +-----+-----+-----+\n          |  |     |     |     |\n          |  |  2  |  4  |  6  |\n          |  |     |     |     |\n         5-  +-----+-----+-----+\n          |  |     |     |     |\n          |  |  1  |  3  |  5  |\n          |  |     |     |     |\n         4-  +-----+-----+-----+\n          |\n          +--|-----|-----|-----|--> x1\n             2     3     4     5\n\nFor example, the (dimension by number of corners by number of elements) array elemtocoord gives the coordinates of the corners of each element.\n\njulia> topology.elemtocoord\n2×4×6 Array{Int64,3}:\n[:, :, 1] =\n 2  3  2  3\n 4  4  5  5\n\n[:, :, 2] =\n 2  3  2  3\n 5  5  6  6\n\n[:, :, 3] =\n 3  4  3  4\n 4  4  5  5\n\n[:, :, 4] =\n 3  4  3  4\n 5  5  6  6\n\n[:, :, 5] =\n 4  5  4  5\n 4  4  5  5\n\n[:, :, 6] =\n 4  5  4  5\n 5  5  6  6\n\nNote that the corners are listed in Cartesian order.\n\nThe (number of faces by number of elements) array elemtobndy gives the boundary number for each face of each element.  A zero will be given for connected faces.\n\njulia> topology.elemtobndy\n4×6 Array{Int64,2}:\n 1  0  1  0  0  0\n 0  0  0  0  2  2\n 0  0  0  0  0  0\n 0  0  0  0  0  0\n\nNote that the faces are listed in Cartesian order.\n\n\n\n\n\n","category":"method"},{"location":"Mesh/#CLIMA.Mesh.Topologies.CubedShellTopology-Tuple{Any,Any,Any}","page":"Mesh","title":"CLIMA.Mesh.Topologies.CubedShellTopology","text":"CubedShellTopology(mpicomm, Nelem, T) <: AbstractTopology{dim}\n\nGenerate a cubed shell mesh with the number of elements along each dimension of the cubes being Nelem. This topology actual creates a cube mesh, and the warping should be done after the grid is created using the cubedshellwarp function. The coordinates of the points will be of type T.\n\nThe elements of the shell are partitioned equally across the MPI ranks based on a space-filling curve.\n\nNote that this topology is logically 2-D but embedded in a 3-D space\n\nExamples\n\nWe can build a cubed shell mesh with 10 elements on each cube, total elements is 10 * 10 * 6 = 600, with\n\nusing CLIMA.Topologies\nusing MPI\nMPI.Init()\ntopology = CubedShellTopology(MPI.COMM_SELF, 10, Float64)\n\n# Typically the warping would be done after the grid is created, but the cell\n# corners could be warped with...\n\n# Shell radius = 1\nx1, x2, x3 = ntuple(j->topology.elemtocoord[j, :, :], 3)\nfor n = 1:length(x1)\n   x1[n], x2[n], x3[n] = Topologies.cubedshellwarp(x1[n], x2[n], x3[n])\nend\n\n# Shell radius = 10\nx1, x2, x3 = ntuple(j->topology.elemtocoord[j, :, :], 3)\nfor n = 1:length(x1)\n  x1[n], x2[n], x3[n] = Topologies.cubedshellwarp(x1[n], x2[n], x3[n], 10)\nend\n\n\n\n\n\n","category":"method"},{"location":"Mesh/#CLIMA.Mesh.Topologies.StackedCubedSphereTopology-Tuple{Any,Any,Any}","page":"Mesh","title":"CLIMA.Mesh.Topologies.StackedCubedSphereTopology","text":"StackedCubedSphereTopology(mpicomm, Nhorz, Rrange;                               boundary=(1,1)) <: AbstractTopology{3}\n\nGenerate a stacked cubed sphere topology with Nhorz by Nhorz cells for each horizontal face and Rrange is the radius edges of the stacked elements.  This topology actual creates a cube mesh, and the warping should be done after the grid is created using the cubedshellwarp function. The coordinates of the points will be of type eltype(Rrange). The inner boundary condition type is boundary[1] and the outer boundary condition type is boundary[2].\n\nThe elements are stacked such that the vertical elements are contiguous in the element ordering.\n\nThe elements of the brick are partitioned equally across the MPI ranks based on a space-filling curve. Further, stacks are not split at MPI boundaries.\n\nExamples\n\nWe can build a cubed sphere mesh with 10 x 10 x 5 elements on each cube, total elements is 10 * 10 * 5 * 6 = 3000, with\n\nusing CLIMA.Topologies\nusing MPI\nMPI.Init()\nNhorz = 10\nNstack = 5\nRrange = Float64.(accumulate(+,1:Nstack+1))\ntopology = StackedCubedSphereTopology(MPI.COMM_SELF, Nhorz, Rrange)\n\nx1, x2, x3 = ntuple(j->reshape(topology.elemtocoord[j, :, :],\n                            2, 2, 2, length(topology.elems)), 3)\nfor n = 1:length(x1)\n   x1[n], x2[n], x3[n] = Topologies.cubedshellwarp(x1[n], x2[n], x3[n])\nend\n\nNote that the faces are listed in Cartesian order.\n\n\n\n\n\n","category":"method"},{"location":"Mesh/#Functions-1","page":"Mesh","title":"Functions","text":"","category":"section"},{"location":"Mesh/#","page":"Mesh","title":"Mesh","text":"Topologies.cubedshellmesh\nTopologies.cubedshellwarp\nTopologies.hasboundary","category":"page"},{"location":"Mesh/#CLIMA.Mesh.Topologies.cubedshellmesh","page":"Mesh","title":"CLIMA.Mesh.Topologies.cubedshellmesh","text":"cubedshellmesh(T, Ne; part=1, numparts=1)\n\nGenerate a cubed mesh with each of the \"cubes\" has an Ne X Ne grid of elements.\n\nThe mesh can optionally be partitioned into numparts and this returns partition part.  This is a simple Cartesian partition and further partitioning (e.g, based on a space-filling curve) should be done before the mesh is used for computation.\n\nThis mesh returns the cubed spehere in a flatten fashion for the vertex values, and a remapping is needed to embed the mesh in a 3-D space.\n\nThe mesh structures for the cubes is as follows:\n\nx2\n   ^\n   |\n4Ne-           +-------+\n   |           |       |\n   |           |   6   |\n   |           |       |\n3Ne-           +-------+\n   |           |       |\n   |           |   5   |\n   |           |       |\n2Ne-           +-------+\n   |           |       |\n   |           |   4   |\n   |           |       |\n Ne-   +-------+-------+-------+\n   |   |       |       |       |\n   |   |   1   |   2   |   3   |\n   |   |       |       |       |\n  0-   +-------+-------+-------+\n   |\n   +---|-------|-------|------|-> x1\n       0      Ne      2Ne    3Ne\n\n\n\n\n\n","category":"function"},{"location":"Mesh/#CLIMA.Mesh.Topologies.cubedshellwarp","page":"Mesh","title":"CLIMA.Mesh.Topologies.cubedshellwarp","text":"cubedshellwarp(a, b, c, R = max(abs(a), abs(b), abs(c)))\n\nGiven points (a, b, c) on the surface of a cube, warp the points out to a spherical shell of radius R based on the equiangular gnomonic grid proposed by Ronchi, Iacono, Paolucci (1996) https://doi.org/10.1006/jcph.1996.0047\n\n@article{RonchiIaconoPaolucci1996,\n  title={The ``cubed sphere'': a new method for the solution of partial\n         differential equations in spherical geometry},\n  author={Ronchi, C. and Iacono, R. and Paolucci, P. S.},\n  journal={Journal of Computational Physics},\n  volume={124},\n  number={1},\n  pages={93--114},\n  year={1996},\n  doi={10.1006/jcph.1996.0047}\n}\n\n\n\n\n\n","category":"function"},{"location":"Mesh/#CLIMA.Mesh.Topologies.hasboundary","page":"Mesh","title":"CLIMA.Mesh.Topologies.hasboundary","text":"hasboundary(topology::AbstractTopology)\n\nquery function to check whether a topology has a boundary (i.e., not fully periodic)\n\n\n\n\n\n","category":"function"},{"location":"Mesh/#Grids-1","page":"Mesh","title":"Grids","text":"","category":"section"},{"location":"Mesh/#","page":"Mesh","title":"Mesh","text":"Grids specify the approximation within each element, and any necessary warping.","category":"page"},{"location":"Mesh/#","page":"Mesh","title":"Mesh","text":"Grids.DiscontinuousSpectralElementGrid","category":"page"},{"location":"Mesh/#CLIMA.Mesh.Grids.DiscontinuousSpectralElementGrid","page":"Mesh","title":"CLIMA.Mesh.Grids.DiscontinuousSpectralElementGrid","text":"DiscontinuousSpectralElementGrid(topology; FloatType, DeviceArray,\n                                 polynomialorder,\n                                 meshwarp = (x...)->identity(x))\n\nGenerate a discontinuous spectral element (tensor product, Legendre-Gauss-Lobatto) grid/mesh from a topology, where the order of the elements is given by polynomialorder. DeviceArray gives the array type used to store the data (CuArray or Array), and the coordinate points will be of FloatType.\n\nThe optional meshwarp function allows the coordinate points to be warped after the mesh is created; the mesh degrees of freedom are orginally assigned using a trilinear blend of the element corner locations.\n\n\n\n\n\n","category":"type"},{"location":"Mesh/#Filters-1","page":"Mesh","title":"Filters","text":"","category":"section"},{"location":"Mesh/#","page":"Mesh","title":"Mesh","text":"There are methods used to cleanup state vectors.","category":"page"},{"location":"Mesh/#","page":"Mesh","title":"Mesh","text":"Filters.CutoffFilter\nFilters.ExponentialFilter\nFilters.TMARFilter","category":"page"},{"location":"Mesh/#CLIMA.Mesh.Filters.CutoffFilter","page":"Mesh","title":"CLIMA.Mesh.Filters.CutoffFilter","text":"CutoffFilter(grid, Nc=polynomialorder(grid))\n\nReturns the spectral filter that zeros out polynomial modes greater than or equal to Nc.\n\n\n\n\n\n","category":"type"},{"location":"Mesh/#CLIMA.Mesh.Filters.ExponentialFilter","page":"Mesh","title":"CLIMA.Mesh.Filters.ExponentialFilter","text":"ExponentialFilter(grid, Nc=0, s=32, α=-log(eps(eltype(grid))))\n\nReturns the spectral filter with the filter function\n\nσ(η) = xp(-α η^s)\n\nwhere s is the filter order (must be even), the filter starts with polynomial order Nc, and alpha is a parameter controlling the smallest value of the filter function.\n\n\n\n\n\n","category":"type"},{"location":"Mesh/#CLIMA.Mesh.Filters.TMARFilter","page":"Mesh","title":"CLIMA.Mesh.Filters.TMARFilter","text":"TMARFilter()\n\nReturns the truncation and mass aware rescaling nonnegativity preservation filter.  The details of this filter are described in\n\n@article{doi:10.1175/MWR-D-16-0220.1,\n  author = {Light, Devin and Durran, Dale},\n  title = {Preserving Nonnegativity in Discontinuous Galerkin\n           Approximations to Scalar Transport via Truncation and Mass\n           Aware Rescaling (TMAR)},\n  journal = {Monthly Weather Review},\n  volume = {144},\n  number = {12},\n  pages = {4771-4786},\n  year = {2016},\n  doi = {10.1175/MWR-D-16-0220.1},\n}\n\nNote this needs to be used with a restrictive time step or a flux correction to ensure that grid integral is conserved.\n\nExamples\n\nThis filter can be applied to the 3rd and 4th fields of an MPIStateArray Q with the code\n\nFilters.apply!(Q, (3, 4), grid, TMARFilter())\n\nwhere grid is the associated DiscontinuousSpectralElementGrid.\n\n\n\n\n\n","category":"type"},{"location":"Mesh/#Interpolation-1","page":"Mesh","title":"Interpolation","text":"","category":"section"},{"location":"Mesh/#Types-2","page":"Mesh","title":"Types","text":"","category":"section"},{"location":"Mesh/#","page":"Mesh","title":"Mesh","text":"Interpolation.InterpolationBrick\nInterpolation.InterpolationCubedSphere ","category":"page"},{"location":"Mesh/#CLIMA.Mesh.Interpolation.InterpolationBrick","page":"Mesh","title":"CLIMA.Mesh.Interpolation.InterpolationBrick","text":"InterpolationBrick{\nFT <: AbstractFloat,\nT <: Int,\nFTV <: AbstractVector{FT},\nFTVD <: AbstractVector{FT},\nTVD <: AbstractVector{T},\nFTA2 <: Array{FT, 2},\nUI8AD <: AbstractArray{UInt8, 2},\nUI16VD <: AbstractVector{UInt16},\nI32V <: AbstractVector{Int32},\n} <: InterpolationTopology\n\nThis interpolation data structure and the corresponding functions works for a brick, where stretching/compression happens only along the x1, x2 & x3 axis. Here x1 = X1(ξ1), x2 = X2(ξ2) and x3 = X3(ξ3).\n\nFields\n\nNel\nNumber of elements\nNp\nTotal number of interpolation points\nNpl\nTotal number of interpolation points on local process\npoly_order\nPolynomial order of spectral element approximation\nxbnd\nDomain bounds in x1, x2 and x3 directions\nx1g\nInterpolation grid in x1 direction\nx2g\nInterpolation grid in x2 direction\nx3g\nInterpolation grid in x3 direction\nξ1\nUnique ξ1 coordinates of interpolation points within each spectral element\nξ2\nUnique ξ2 coordinates of interpolation points within each spectral element\nξ3\nUnique ξ3 coordinates of interpolation points within each spectral element\nflg\nFlags when ξ1/ξ2/ξ3 interpolation point matches with a GLL point\nfac\nNormalization factor\nx1i\nx1 interpolation grid index of interpolation points within each element on the local process\nx2i\nx2 interpolation grid index of interpolation points within each element on the local process\nx3i\nx3 interpolation grid index of interpolation points within each element on the local process\noffset\nOffsets for each element\nm1_r\nGLL points\nm1_w\nGLL weights\nwb\nBarycentric weights\nNp_all\nNumber of interpolation points on each of the processes\nx1i_all\nx1 interpolation grid index of interpolation points within each element on all processes stored only on proc 0\nx2i_all\nx2 interpolation grid index of interpolation points within each element on all processes stored only on proc 0\nx3i_all\nx3 interpolation grid index of interpolation points within each element on all processes stored only on proc 0\n\nUsage\n\nInterpolationBrick(grid::DiscontinuousSpectralElementGrid{FT}, xbnd::Array{FT,2}, xres) where FT <: AbstractFloat\n\nThis interpolation structure and the corresponding functions works for a brick, where stretching/compression happens only along the x1, x2 & x3 axis. Here x1 = X1(ξ1), x2 = X2(ξ2) and x3 = X3(ξ3).\n\nArguments for the inner constructor\n\ngrid: DiscontinousSpectralElementGrid\nxbnd: Domain boundaries in x1, x2 and x3 directions\nxres: Resolution of the interpolation grid in x1, x2 and x3 directions\n\n\n\n\n\n","category":"type"},{"location":"Mesh/#CLIMA.Mesh.Interpolation.InterpolationCubedSphere","page":"Mesh","title":"CLIMA.Mesh.Interpolation.InterpolationCubedSphere","text":"InterpolationCubedSphere{\nFT <: AbstractFloat,\nT <: Int,\nFTV <: AbstractVector{FT},\nFTVD <: AbstractVector{FT},\nTVD <: AbstractVector{T},\nUI8AD <: AbstractArray{UInt8, 2},\nUI16VD <: AbstractVector{UInt16},\nI32V <: AbstractVector{Int32},\n} <: InterpolationTopology\n\nThis interpolation structure and the corresponding functions works for a cubed sphere topology. The data is interpolated along a lat/long/rad grid.\n\n-90⁰  ≤ lat  ≤ 90⁰\n\n-180⁰ ≤ long ≤ 180⁰\n\nRᵢ ≤ r ≤ Rₒ\n\nFields\n\nNel\nNumber of elements\nNp\nNumber of interpolation points\nNpl\nNumber of interpolation points on local process\npoly_order\nPolynomial order of spectral element approximation\nn_rad\nNumber of interpolation points in radial direction\nn_lat\nNumber of interpolation points in lat direction\nn_long\nNumber of interpolation points in long direction\nrad_grd\nInterpolation grid in radial direction\nlat_grd\nInterpolation grid in lat direction\nlong_grd\nInterpolation grid in long direction\nξ1\nDevice array containing ξ1 coordinates of interpolation points within each element\nξ2\nDevice array containing ξ2 coordinates of interpolation points within each element\nξ3\nDevice array containing ξ3 coordinates of interpolation points within each element\nflg\nflags when ξ1/ξ2/ξ3 interpolation point matches with a GLL point\nfac\nNormalization factor\nradi\nRadial coordinates of interpolation points withing each element\nlati\nLatitude coordinates of interpolation points withing each element\nlongi\nLongitude coordinates of interpolation points withing each element\noffset\nOffsets for each element\nm1_r\nGLL points\nm1_w\nGLL weights\nwb\nBarycentric weights\nNp_all\nNumber of interpolation points on each of the processes\nradi_all\nRadial interpolation grid index of interpolation points within each element on all processes stored only on proc 0\nlati_all\nLatitude interpolation grid index of interpolation points within each element on all processes stored only on proc 0\nlongi_all\nLongitude interpolation grid index of interpolation points within each element on all processes stored only on proc 0\n\nUsage\n\nInterpolationCubedSphere(grid::DiscontinuousSpectralElementGrid, vert_range::AbstractArray{FT}, nhor::Int, lat_res::FT, long_res::FT, rad_res::FT) where {FT <: AbstractFloat}\n\nThis interpolation structure and the corresponding functions works for a cubed sphere topology. The data is interpolated along a lat/long/rad grid.\n\n-90⁰  ≤ lat  ≤ 90⁰\n\n-180⁰ ≤ long ≤ 180⁰\n\nRᵢ ≤ r ≤ Rₒ\n\nArguments for the inner constructor\n\ngrid: DiscontinousSpectralElementGrid\nvert_range: Vertex range along the radial coordinate\nlat_res: Resolution of the interpolation grid along the latitude coordinate in radians\nlong_res: Resolution of the interpolation grid along the longitude coordinate in radians\nrad_res: Resolution of the interpolation grid along the radial coordinate\n\n\n\n\n\n","category":"type"},{"location":"Mesh/#Functions-2","page":"Mesh","title":"Functions","text":"","category":"section"},{"location":"Mesh/#","page":"Mesh","title":"Mesh","text":"Interpolation.interpolate_local! \nInterpolation.project_cubed_sphere!\nInterpolation.accumulate_interpolated_data!","category":"page"},{"location":"Mesh/#CLIMA.Mesh.Interpolation.interpolate_local!","page":"Mesh","title":"CLIMA.Mesh.Interpolation.interpolate_local!","text":"interpolate_local!(intrp_brck::InterpolationBrick{FT}, \n                           sv::AbstractArray{FT}, \n                            v::AbstractArray{FT}) where {FT <: AbstractFloat}\n\nThis interpolation function works for a brick, where stretching/compression happens only along the x1, x2 & x3 axis. Here x1 = X1(ξ1), x2 = X2(ξ2) and x3 = X3(ξ3)\n\nArguments\n\nintrp_brck: Initialized InterpolationBrick structure\nsv: State Array consisting of various variables on the discontinuous Galerkin grid\nv:  Interpolated variables\n\n\n\n\n\ninterpolate_local!(intrp_cs::InterpolationCubedSphere{FT}, \n                         sv::AbstractArray{FT}, \n                          v::AbstractArray{FT}) where {FT <: AbstractFloat}\n\nThis interpolation function works for cubed spherical shell geometry.\n\nArguments\n\nintrp_cs: Initialized cubed sphere structure\nsv: Array consisting of various variables on the discontinuous Galerkin grid\nv:  Array consisting of variables on the interpolated grid\n\n\n\n\n\n","category":"function"},{"location":"Mesh/#CLIMA.Mesh.Interpolation.project_cubed_sphere!","page":"Mesh","title":"CLIMA.Mesh.Interpolation.project_cubed_sphere!","text":"project_cubed_sphere!(intrp_cs::InterpolationCubedSphere{FT}, \n                             v::AbstractArray{FT}, \n                          uvwi::Tuple{Int,Int,Int}) where {FT <: AbstractFloat}\n\nThis function projects the velocity field along unit vectors in radial, lat and long directions for cubed spherical shell geometry.\n\nFields\n\nintrp_cs: Initialized cubed sphere structure\nv: Array consisting of velocity field on the discontinuous Galerkin grid\nuvwi:  Tuple providing the column numbers for u, v and w in the array. These columns will be replaced with projected velocity fields.\n\n\n\n\n\n","category":"function"},{"location":"Mesh/#CLIMA.Mesh.Interpolation.accumulate_interpolated_data!","page":"Mesh","title":"CLIMA.Mesh.Interpolation.accumulate_interpolated_data!","text":"accumulate_interpolated_data!(intrp::InterpolationTopology, \n                                 iv::AbstractArray{FT,2}, \n                                fiv::AbstractArray{FT,4}) where {FT <: AbstractFloat}\n\nThis interpolation function gathers interpolated data onto process # 0.\n\nFields\n\nintrp: Initialized interpolation topology structure\niv: Interpolated variables on local process\nfiv: Full interpolated variables accumulated on process # 0\n\n\n\n\n\n","category":"function"},{"location":"Arrays/#Arrays-1","page":"Arrays","title":"Arrays","text":"","category":"section"},{"location":"Arrays/#","page":"Arrays","title":"Arrays","text":"CurrentModule = CLIMA.MPIStateArrays","category":"page"},{"location":"Arrays/#MPIStateArrays-1","page":"Arrays","title":"MPIStateArrays","text":"","category":"section"},{"location":"Arrays/#","page":"Arrays","title":"Arrays","text":"Storage for the state of a discretization.","category":"page"},{"location":"Arrays/#","page":"Arrays","title":"Arrays","text":"MPIStateArray\nbegin_ghost_exchange!\nend_ghost_exchange!","category":"page"},{"location":"Arrays/#CLIMA.MPIStateArrays.MPIStateArray","page":"Arrays","title":"CLIMA.MPIStateArrays.MPIStateArray","text":"MPIStateArray{FT, DATN<:AbstractArray{FT,3}, DAI1, DAV,\n              DAT2<:AbstractArray{FT,2}} <: AbstractArray{FT, 3}\n\n\n\n\n\n","category":"type"},{"location":"Arrays/#CLIMA.MPIStateArrays.begin_ghost_exchange!","page":"Arrays","title":"CLIMA.MPIStateArrays.begin_ghost_exchange!","text":"begin_ghost_exchange!(Q::MPIStateArray; dependencies = nothing)\n\nBegin the MPI halo exchange of the data stored in Q.  A KernelAbstractions Event is returned that can be used as a dependency to end the exchange.\n\n\n\n\n\n","category":"function"},{"location":"Arrays/#CLIMA.MPIStateArrays.end_ghost_exchange!","page":"Arrays","title":"CLIMA.MPIStateArrays.end_ghost_exchange!","text":"end_ghost_exchange!(Q::MPIStateArray; dependencies = nothing)\n\nThis function blocks on the host until the ghost halo is received from MPI.  A KernelAbstractions Event is returned that can be waited on to indicate when the data is ready on the device.\n\n\n\n\n\n","category":"function"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"newcommandparamT1       text1\nnewcommandhyperparamT1text1\nnewcommandsimparamT1  text1\n\nnewcommandexp1mathrmexpleft(1right)\nnewcommandatan1mathrmatanleft(1right)\nnewcommandsign1mathrmsignleft(1right)\nnewcommanderf1mathrmerfleft(1right)\nnewcommanderfinv1mathrmerfinvleft(1right)\n\nnewcommandparam1     1\nnewcommandhyperparam11\nnewcommandsimparam1  1\n\nnewcommandCROSStimes\nnewcommandGRADnabla\nnewcommandDOTbullet\nnewcommandPDpartial\nnewcommandPDFzfracPDPD z\nnewcommandDM1langle 1 rangle\nnewcommandiEnve\nnewcommandSD2overline1_2\nnewcommandSDi1SD1i\nnewcommandSDj1SD1j\nnewcommandSDe1SD1iEnv\nnewcommandSDiog21_2\nnewcommandSDio1SDiog1i\nnewcommandSDjo1SDiog1j\nnewcommandSDeo1SDiog1iEnv\nnewcommandaSD21_2\nnewcommandaSDi1aSD1i\nnewcommandaSDj1aSD1j\nnewcommandaSDe1aSD1iEnv\nnewcommandotherDefswhere additional variable definitions are in\n\nnewcommandIntraCVSDi2overline1_i      2_i      \nnewcommandIntraCVSDj2overline1_j      2_j      \nnewcommandIntraCVSDe2overline1_iEnv2_iEnv\n\nnewcommandInterCVSDi2overline1_i      overline2_i      \nnewcommandInterCVSDj2overline1_j      overline2_j      \nnewcommandInterCVSDe2overline1_iEnvoverline2_iEnv\n\nnewcommandTCV2langle 1^*2^* rangle\n\nnewcommandBC11_z_min\nnewcommandBCT11_z_max\nnewcommandBCB11_z_min\nnewcommandBCG11_z_boundary\n\nnewcommandKmK^m\nnewcommandKhK^h\nnewcommandTEquilibT_mathrmiterated\nnewcommandPhasePartitionq\nnewcommandExnerDPi_dry\nnewcommandExnerMPi_moist\nnewcommandWindSpeedu\nnewcommandLayerThicknessparamDelta z\nnewcommandSurfaceRoughness1paramz_01\nnewcommandSensibleSurfaceHeatFluxF_mathrmsensible\nnewcommandLatentSurfaceHeatFluxF_mathrmlatent\nnewcommandFrictionVelocityu_*\nnewcommandBuoyancyb\nnewcommandBuoyancyGradPD_z Buoyancy\nnewcommandBuoyancyFluxIntraCVSDiwb\nnewcommandTemperatureScaletheta_*\nnewcommandSurfaceMomentumFluxBCoverlinewu\nnewcommandSurfaceHeatFluxBCoverlinewtheta\nnewcommandSurfaceBuoyancyFluxBCIntraCVSDiwtheta\nnewcommandConvectiveVelocityw_*  Convective velocity near the surface\nnewcommandInversionHeightz_*\nnewcommandMOLenLambda_M-O\nnewcommandzLLparamz_  z at the first surface level (we should make this grid-independent)\n\nnewcommandqtq_mathrmtot\nnewcommandqrq_mathrmrain\nnewcommandqlq_mathrmliq\nnewcommandqiq_mathrmice\nnewcommandqvq_mathrmvap\nnewcommandqvsatq_mathrmvap^*\nnewcommandpvsatp_mathrmvap^*\nnewcommandqcq_mathrmcon\nnewcommandThetaVaptheta_mathrmvap\nnewcommandThetaVirttheta_mathrmvirt\nnewcommandThetaRhotheta_rho\nnewcommandThetaLiqtheta_mathrmliq\nnewcommandThetaLiqIcetheta_mathrmliq-ice\nnewcommandThetaLiqIceSattheta^*_mathrmliq-ice\nnewcommandThetaDrytheta_mathrmdry\nnewcommandTDryT_dry\nnewcommandeinte_mathrmint\nnewcommandetote_mathrmtot\n\nnewcommandTRefT_0\nnewcommandalphaRefalpha_0\nnewcommandrhoRefrho_0\nnewcommandpRefp_0\nnewcommandHeavisidemathcal H\n\nnewcommandalphaLLalphaRef_zLL\nnewcommanduHsimparammathbfu_h\n\nnewcommandCoriolisParamhyperparammathrmcoriolis_param\nnewcommandSubsidenceParamhyperparammathrmsubsidence\nnewcommandbetaMhyperparambeta_m\nnewcommandbetaHhyperparambeta_h\nnewcommandgammaMhyperparamgamma_m\nnewcommandgammaHhyperparamgamma_h\n\nnewcommandPTildeparamtildep\nnewcommandVKConstparamkappa_mathrmVon-Karman\nnewcommandNsdhyperparamN_sd\nnewcommandgravparamg\nnewcommandTZeroparamT_0\nnewcommandRefHintVparameint_v0\nnewcommandRefHintIparameint_i0\n\nnewcommandEpsDVparamvarepsilon_dv\nnewcommandEpsVDparamvarepsilon_vd\nnewcommandRmR_m\nnewcommandCpmc_pm\nnewcommandCvmc_vm\nnewcommandRdparamR_d\nnewcommandRvparamR_v\nnewcommandCp1paramc_p1\nnewcommandCv1paramc_v1\nnewcommandCvdCvd\nnewcommandCvvCvv\nnewcommandCvlCvl\nnewcommandCviCvi\n\nnewcommandDeltaCpparamDelta c_p\nnewcommandTTripleparamT_mathrmtr\nnewcommandPTripleparamp_mathrmtr\nnewcommandTFreezeparamT_mathrmfreeze\n\nnewcommandRefLHvparamL_v0\nnewcommandRefLHsparamL_s0\nnewcommandRefLHfparamL_f0\nnewcommandLatentHeatV1L_vap(1)\nnewcommandLatentHeatS1L_sub(1)\nnewcommandLatentHeatF1L_fus(1)","category":"page"},{"location":"Atmos/EDMFEquations/#Eddy-Diffusivity-Mass-Flux-(EDMF)-equations-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"This document is concerned with defining the set of equations solved in the atmospheric turbulence convection model: the EDMF equations. Color-coding is used to indicate:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"paramTConstant parameters that are fixed in space and time (eg those defined in CLIMAParametersjl)\nsimparamTSingle column (SC) inputs (eg variables that are fed into the SC model from the dynamical core (eg horizontal velocity))\nhyperparamTTunable hyper-parameters that will need to be changeable but will only include single numbers (eg Float64)","category":"page"},{"location":"Atmos/EDMFEquations/#Domain-decomposition-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Domain decomposition","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"While our model is 1D along z and there is no spatial discretization in the horizontal directions (x and y), the horizontal space is broken into Nsd (sim 5-10) \"bins\", or \"subdomains\" (SDs), denoted by subscript i, where 1 le i le Nsd. One of the subdomains, the \"environment\", is treated different compared to others, termed \"updrafts\". This environment subdomain is denoted with a special index iEnv (which we usually set to 1). For dummy variables phi and psi, we use several domain and SD representations of interest:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\n  SDiphi                                                                                   quad  texthorizontal mean of variable phi over SD i \n  SDiphi = phi_i - SDiphi                                                            quad  textfluctuations of phi about the SD mean \n  IntraCVSDiphipsi                                                                      quad  textintra subdomain covariance \n  DMphi = sum_i aSDia SDiphi                                                       quad  texthorizontal mean of phi over the total domain \n  SDiphi^* = SDiphi - DMphi                                                        quad  textdifference between SD  domain means \n  InterCVSDiphipsi                                                                      quad  textinter subdomain covariance among SD means \n  phi^* = phi - DMphi                                                                    quad  textdifference between SD  domain means \n  TCVphipsi = sum_forall i a_i IntraCVSDiphipsi +\n  sum_forall i sum_forall j  aSDia aSDja SDiphi(SDipsi - SDjpsi)     quad  texttotal covariance\nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Here, SDiphi and SDipsi are a dummy variables for the following 7 unknowns:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\n  SDiw                    quad textvertical velocity \n  SDieint                quad textinternal energy  \n  SDiqt                  quad texttotal water specific humidity  \n  SDiTKE                  quad textturbulent kinetic energy (05(IntraCVSDiuu+IntraCVSDivv+IntraCVSDiww))  \n  IntraCVSDieinteint  quad textintra subdomain covariance of eint and eint  \n  IntraCVSDiqtqt      quad textintra subdomain covariance of qt and qt \n  IntraCVSDieintqt    quad textintra subdomain covariance of eint and qt\nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"From the large-scale model perspective, DMphi represents the resolved grid-scale (GS) mean, and TCVphipsi represents the SGS fluxes and (co)-variances of scalars that need to be parameterized. Equations in the following sections, \\eqref{eq:AreaFracGov}, \\eqref{eq:1stMoment} and \\eqref{eq:2ndMoment}, are solved on z_min le z le z_max and t ge 0. There are 8 Nsd equations in total.","category":"page"},{"location":"Atmos/EDMFEquations/#Domain-averaged-equations-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Domain averaged equations","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"The EDMF model can be used in the context of a stand-alone single column, or integrated with a dynamical core. Either way, the EDMF model relies on domain-averaged variables, which may be prescribed or solved for. Taking an area fraction-weighted average of the SD equations yields the domain-averaged equations (which should be consistent with variables in the dynamical core).","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"The domain-averaged equations for DMphi in w qt eint uH are:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\nPD_t (rhoRef DMphi)\n+ PD_z (rhoRef DMw DMphi)\n+ nabla_h DOT left( rhoRef DMphi otimes DMphi right)\n= \n  DMS_textdiff^DMphi\n+ DMS_textpress\n+ DMS_textcoriolis\n+ DMS_textsubsidence\nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"where","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\nDMS_textdiff^DMphi  = PD_z (rhoRef aSDea SDeKm PD_z DMphi)   labeleqgm_diffusion \nDMS_textdiff^w          = PD_z (rhoRef aSDea SDeKm PD_z DMw)      labeleqgm_diffusion_w \nDMS_textpress             = - GRAD_h DMp                                       labeleqgm_pressure \nDMS_textcoriolis          = CoriolisParam DMphi CROSS mathbfk             labeleqgm_coriolis \nDMS_textsubsidence        = - SubsidenceParam GRAD phi                          labeleqgm_subsidence \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#Sub-domain-equations:-Area-fraction-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Sub-domain equations: Area fraction","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"The EDMF equations take the form of advection-diffusion equations. The size of these SDs are tracked by solving an equation governing the area fraction in the ith SD (aSDia), given by:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"begingather\n  PD_t (rhoRef aSDia)\n  + PD_z (rhoRef aSDia SDiw)\n  + GRAD_h DOT\n  (rhoRef aSDia DMuH)\n  =\n  SDiS^a\n   quad i ne iEnv labeleqAreaFracGov \n  aSDia = 1 - sum_jneiEnv aSDja quad i = iEnv labeleqAreaFracConserve \n  qquad 0  aSDia  1 labeleqAreaFracConstraint\nendgather","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Here, rhoRef SDiw uH is fluid density, mean vertical velocity along z, and domain-mean of the horizontal velocity respectively. The area fraction constraints are necessary to ensure the system of equations is well-posed. All source terms (SDiS^a) will be discussed in later sections.","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"note: Note\nThe greater than zero constraint must be satisfied at every step of the solution process, since it is necessary to avoid division by zero in the mean field equations.","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\nSDiS^a = SDiS_epsilondelta^a\nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#Source-term-definitions-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Source term definitions","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"We note that the net exchange is zero sum_i SDiS_epsilondelta^a = 0. Therefore, we may define the environment source term as the negative sum of all updraft source terms. The entrainment-detrainment source is:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\nSDiS_epsilondelta^a =\nbegincases\n  rho a_i SDiw left( -delta_i + epsilon_i right)  i ne iEnv \n  0 - sum_j ne iEnv SDjS_epsilondelta^a  i = iEnv \nendcases\nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"where additional variable definitions are in:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Reference state profiles (pRef, rhoRef, and alphaRef).\nEntrainment-Detrainment (epsilon_i) and (delta_i).","category":"page"},{"location":"Atmos/EDMFEquations/#Sub-domain-equations:-1st-moment-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Sub-domain equations: 1st moment","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"The 1st moment sub-domain equations are:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalignlabeleq1stMoment\n  PD_t (rhoRef aSDia SDiphi)\n  + PD_z (rhoRef aSDia SDiw SDiphi)\n  + GRAD_h DOT\n  (rhoRef aSDia DMuH SDiphi)\n  =\n  SDiS^phi\n   quad forall i \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Here, SDiS^phi are source terms, including diffusion, and many other sub-grid-scale (SGS) physics. In general, SDiS^phi and SDiS^a may depend on SDjphi and or aSDja for any j.","category":"page"},{"location":"Atmos/EDMFEquations/#Source-terms-per-equation-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Source terms per equation","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"The source terms common to all unknowns are:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\nSDiS^phi =\n  SDiS_epsilondelta^phi\n+ SDiS_textturb-transp^phi quad forall phi\nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Additional source terms exist in other equations:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\nSDiS^w =\n  SDiS_epsilondelta^w\n+ SDiS_textturb-transp^w\n+ SDiS_textbuoy\n+ SDiS_textnh-press\n+ SDiS_textcoriolis \nSDiS^eint =\n  SDiS_epsilondelta^eint\n+ SDiS_textturb-transp^eint\n+ SDiS_textMP-MSS^eint\n+ SDiS_textrad \nSDiS^qt =\n  SDiS_epsilondelta^qt\n+ SDiS_textturb-transp^qt\n+ SDiS_textMP-MSS^qt\nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#Source-term-definitions-2","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Source term definitions","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Note: The sum of the total pressure and gravity are recast into the sum of the non-hydrostatic pressure and buoyancy sources.","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\nSDiS_epsilondelta^phi =\nbegincases\n  rhoRef a_i SDiw left( -delta_i SDiphi + epsilon_i SDephi right)  i ne iEnv \n  0 - sum_j ne iEnv SDjS_epsilondelta^phi  i=iEnv \nendcases \nSDiS_textturb-transp^phi  =  -PD_z (rhoRef a_i IntraCVSDiwphi) \n  = PD_z (rhoRef a_i SDiKm PD_z SDiphi) \nSDiS_textnh-press = -rhoRef aSDia left( alpha_b SDib  + alpha_d frac(SDiw - SDew)  SDiw - SDew  r_d aSDia^12 right) \nalpha_b = 13 quad alpha_d = 0375 quad r_d      = 500 m \nSDiS_textbuoy = rhoRef aSDia SDib \nSDiS_textcoriolis  = f(SDimathbfu - SDimathbfu_textgeo-wind) \nSDiS_textrad  = left( PD_t SDieint right)_radiation \nSDiS_textMP-MSS^qt  = \nSDiS_textMP-MSS^eint  = \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"where additional variable definitions are in:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Reference state profiles (pRef, rhoRef, and alphaRef).\nEntrainment-Detrainment (epsilon_i) and (delta_i).\nBuoyancy (Buoyancy).\nEddy diffusivity (Km Kh).","category":"page"},{"location":"Atmos/EDMFEquations/#Sub-domain-equations:-2nd-moment-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Sub-domain equations: 2nd moment","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"The 2nd moment sub-domain equations are of the exact same form as the 1st moment equations (equation \\eqref{eq:1stMoment}):","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalignlabeleq2ndMoment\n  PD_t (rhoRef aSDia SDiphi)\n  + PD_z (rhoRef aSDia SDiw SDiphi)\n  + GRAD_h DOT\n  (rhoRef aSDia DMuH SDiphi)\n  =\n  SDiS^phi\n   quad forall i \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Here, SDiS^phi are source terms, including diffusion, and many other sub-grid-scale (SGS) physics. In general, SDiS^phi and SDiS^a may depend on SDjphi and or aSDja for any j.","category":"page"},{"location":"Atmos/EDMFEquations/#Source-terms-per-equation-2","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Source terms per equation","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"The source terms common to all unknowns are:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\nSDiS^phipsi =\n  SDiS_epsilondelta^phipsi\n+ SDiS_textx-grad flux^phipsi\n+ SDiS_textturb-transp^phipsi\nquad forall phi psi\nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Additional source terms exist in other equations:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\nSDiS^TKE =\n  SDiS_epsilondelta^TKE\n+ SDiS_textx-grad flux^TKE\n+ SDiS_textturb-transp^TKE\n+ SDiS_textdissip\n+ SDiS_textpress\n+ SDiS_textbuoyancy \nSDiS^phipsi =\n  SDiS_epsilondelta^phipsi\n+ SDiS_textx-grad flux^phipsi\n+ SDiS_textturb-transp^phipsi\n+ SDiS_textdissip^phipsi\n+ SDiS_textMP-MSS^phipsi\nquad phipsi in qtqt einteint eint qt\nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#Source-term-definitions-3","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Source term definitions","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\nSDiS_epsilondelta^phipsi =\nbegincases\n  rhoRef a_i SDiw left -delta_i IntraCVSDiphipsi + epsilon_i\nleft(\nIntraCVSDephipsi + (SDephi - SDiphi)(SDepsi - SDipsi)\nright) right  i ne iEnv \n  0 - sum_jne iEnv SDjS_epsilondelta^phipsi  i=iEnv \nendcases \nSDiS_epsilondelta^TKE =\nbegincases\n  rhoRef a_i SDiw left -delta_i SDiTKE + epsilon_i\nleft(\nSDeTKE + frac12 (SDew - SDiw)^2\nright) right  i ne iEnv \n  0 - sum_jne iEnv SDjS_epsilondelta^TKE  i=iEnv \nendcases \nSDiS_textx-grad flux^phipsi\n =\n- rhoRef a_i IntraCVSDiwpsi PD_z SDiphi\n- rhoRef a_i IntraCVSDiwphi PD_z SDipsi \n =\n 2 rhoRef a_i SDiKh PD_z SDipsi PD_z SDiphi \nSDiS_textx-grad flux^TKE\n =\nrhoRef a_i SDiKm left left(PD_zDMuright)^2 + left(PD_zDMvright)^2 + left(PD_zDMwright)^2 right \nSDiS_textturb-transp^phipsi  = - PD_z (rhoRef a_i overlinew_iphi_ipsi_i) \n = PD_z (rhoRef a_i SDiKh PD_z IntraCVSDiphipsi) \nSDiS_textturb-transp^TKE  = PD_z (rhoRef a_i SDiKm PD_z SDiTKE) \nSDiS_textdissip\n = - rhoRef a_i c_e IntraCVSDiphipsi fracSDiTKE^12SDiol_mix quad textEquation 38 in Tan et al \nc_e  = 2 \nSDiS_textpress\n = - aSDia left IntraCVSDiu(partial_x p^dagger) +\n                      IntraCVSDiv(partial_y p^dagger) +\n                      IntraCVSDiw(partial_z p^dagger)right  \n = 0 qquad textfor now need to derive correct formulation \nSDiS_textbuoyancy^TKE  = rhoRef aSDia BuoyancyFlux \nSDiS_textMP-MSSP^qtqt\n = \nSDiS_textMP-MSSP^einteint\n = \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"where additional variable definitions are in:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Reference state profiles (pRef, rhoRef, and alphaRef).\nEntrainment-Detrainment (epsilon_i) and (delta_i).\nEddy diffusivity (Km Kh).\nMixing length (l_mix).\nBuoyancy flux (BuoyancyFlux).","category":"page"},{"location":"Atmos/EDMFEquations/#EDMF-variable-definitions-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"EDMF variable definitions","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"The following definitions are ordered in a dependency fashion; all variables are defined from variables already defined in previous subsections.","category":"page"},{"location":"Atmos/EDMFEquations/#Constants-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Constants","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\nc_K  = 01 \ntexttol_InversionHeightmathrm-stable  = 001 \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#Phase-partition-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Phase partition","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\nPhasePartition = qv ql qi \nqv = qt - ql - qi \npvsat(T) = PTriple left( fracTTTriple right)^fracDeltaCpRv expfracRefLHv - DeltaCp TZeroRv left( frac1TTriple - frac1T right) labeleqpvsat \nqvsat(T rho) = fracpvsat(T)rho Rv T                                                                                                                            labeleqqvsat \nqc = max(qt - qvsat 0)                                                                                                                                               labeleqqc \nql = lambda qc                                                                                                                                                         labeleqql \nqi = (1-lambda) qc                                                                                                                                                     labeleqqi \nlambda(T) = Heaviside(T-TFreeze)                                                                                                                                       labeleqlambda \nHeaviside = textHeaviside function \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Functionally,","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\nPhasePartition  = PhasePartition(qt T rho) \nqvsat  = qvsat(T rho) \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#Gas-constants-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Gas constants","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\nEpsDV  = fracRvRd approx 161 \nEpsVD  = fracRdRv approx 062 \nRm  = Rd left1 + (EpsDV-1) qt - EpsDV (ql+qi) right \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#Specific-heats-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Specific heats","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\nCvm = (1 - SDiqt) Cvd + SDiqv Cvv + SDiql Cvl + SDiqi Cvi \nCpm = (1 - SDiqt) Cpd + SDiqt Cpv \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#Latent-heat-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Latent heat","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\nLatentHeatVT = RefLHv + (Cpv - Cpl) (T - TTriple) \nLatentHeatST = RefLHs + (Cpv - Cpi) (T - TTriple) \nLatentHeatFT = RefLHf + (Cpl - Cpi) (T - TTriple) \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#Exner-functions-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Exner functions","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\nExnerD(pRef)    = left(fracpRefPTilde right)^RdCpd \nExnerM(pRef PhasePartition) = left(fracpRefPTilde right)^RmCpm \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"where additional variable definitions are in:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Specific heats Cpm and Cvm.\nGas constants (Rm).\nPhase partition PhasePartition qt qv ql qi qvsat.","category":"page"},{"location":"Atmos/EDMFEquations/#Temperature-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Temperature","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Note that, while temperature may be computed using different thermodynamic formulations, ThermodynamicState's are immediately converted to the (qt eint rhoRef)-formulation.","category":"page"},{"location":"Atmos/EDMFEquations/#Dry-temperature-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Dry temperature","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\nTDry  = ThetaLiqIce ExnerD \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"where additional variable definitions are in:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Exner functions ExnerD and ExnerM.","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Functionally,","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\nTDry  = TDry(ThetaLiqIce pRef) \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#(\\qt,-\\eint,-\\rhoRef{})-formulation-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"(qt eint rhoRef)-formulation","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Here, T conditionally satisfies the non-linear set of equations, which can be solved using a standard root solver (e.g., Secant method):","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\nT =\nbegincases\nmathrmsatisfies  eint(T) = Cvm (T - TZero)  + qv RefHintV - qi RefHintI  qt  qvsat(T rhoRef) \n TZero + fraceint(T)(1-qt)Cvd + qt Cvv + qt RefHintV  textotherwise \nendcases\nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"where additional variable definitions are in:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Phase partition PhasePartition qt qv ql qi qvsat.\nSpecific heats Cpm and Cvm.\nReference state profiles (pRef, rhoRef, and alphaRef).","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Functionally,","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\nT  = T(qt eint rhoRef) \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#(\\qt,-\\ThetaLiqIce,-\\rhoRef,-\\pRef)-formulation-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"(qt ThetaLiqIce rhoRef pRef)-formulation","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Here, T conditionally satisfies the non-linear set of equations, which can be solved using a standard root solver (e.g., Secant method):","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\nT =\nbegincases\nmathrmsatisfies  ThetaLiqIce ExnerM = T left(1 - frac RefLHv ql + RefLHs qiCpm T right)  qt  qvsat(T rhoRef) \n TDry  textotherwise \nendcases\nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"where additional variable definitions are in:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Dry temperature TDry.\nPhase partition PhasePartition qt qv ql qi qvsat.\nSpecific heats Cpm and Cvm.\nExner functions ExnerD and ExnerM.","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Functionally,","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\nT  = T(qt ThetaLiqIce rhoRef pRef) \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#Reference-state-profiles-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Reference state profiles","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Using the hydrostatic balance, PD_z pRef = - rhoRef grav, and the ideal gas law, pRef = rhoRef Rm TRef, the reference state profiles are computed as:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\nPD_z pRef  = - grav fracpRefTRef Rm \nint_BCpRef^pRef fracTDry(BCDMThetaLiqIce pRef)pRef PD pRef  = - fracgravBCDMRm int_z_min^z PD z \nrhoRef(pRef)  = fracpRefTDry(BCDMThetaLiqIce pRef) BCDMRm \nalphaRef  = frac1rhoRef(pRef) \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"where additional variable definitions are in:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Temperature (T and TDry).\nGas constants (Rm).\nSpecific heats Cpm and Cvm.","category":"page"},{"location":"Atmos/EDMFEquations/#Mixing-ratios-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Mixing ratios","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalignlabeleqMixingRatios\nr_con  = fracqt+ql1 - qt \nr_vap  = fracqt-ql    - qi1 - qt \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#Potential-temperatures-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Potential temperatures","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Fix: which virtual potential temperature is used","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalignlabeleqTheta\nThetaDry     = TExnerD \nThetaLiqIce  = ThetaDry (1 - (RefLHv ql + RefLHs qi)(Cpm T)) \nThetaVirt    = ThetaDry (1 - r_con + 061 r_vap) \nThetaVirt    = theta left(1 + 061 qr - ql right) \nThetaRho     = T RmExnerD \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"where additional variable definitions are in:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Reference state profiles (pRef, rhoRef, and alphaRef).\nExner functions (ExnerM).\nMixing ratios (r_con, r_vap).","category":"page"},{"location":"Atmos/EDMFEquations/#Shear-production-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Shear production","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalignlabeleqShearProduction\nS^2 = (PD_z DMu)^2 + (PD_z DMv)^2 + (PD_z SDew)^2 \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#Buoyancy-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Buoyancy","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalignlabeleqBuoyancy\nSDib^dagger  = grav (SDialpha - alphaRef)alphaRef \nSDib  = SDib^dagger - sum_j a_j SDjb^dagger \nalpha_i  = fracSDiRm SDiTpRef \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"where additional variable definitions are in:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Reference state profiles (pRef, rhoRef, and alphaRef).\nPhase partition PhasePartition qt qv ql qi qvsat.\nTemperature (T and TDry).","category":"page"},{"location":"Atmos/EDMFEquations/#Buoyancy-gradient-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Buoyancy gradient","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#(\\qt,-\\ThetaLiqIce,-\\pRef,-\\rhoRef)-formulation-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"(qt ThetaLiqIce pRef rhoRef)-formulation","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalignlabeleqBuoyancyGradLong\nSDiBuoyancyGrad  = PD_z SDiThetaLiqIce\nleft (1-f_c) PD_ThetaLiqIce b _d  + f_c PD_ThetaLiqIce b _s right +\nPD_z SDiqt      left (1-f_c) PD_qt b _d + f_c PD_qt b _s right \nf_c = 0 qquad textgood for simple cases need to confirm for more complex cases \nPD_ThetaLiqIce b _d  = fracgravDMThetaVirt left 1 + left( fracRvRd - 1 right) SDiqt right \nPD_ThetaLiqIce b _s = fracgravDMThetaVirt left 1 + fracRvRd left(1 + fracLatentHeatVSDiTRv SDiT right) SDiqvsat - SDiqt right left( 1 + fracLatentHeatVSDiT^2Cpm Rv SDiT^2 SDiqvsat right)^-1 \nPD_qt b _d = fracgravDMThetaVirt left( fracRvRd - 1 right) SDiThetaDry \nPD_qt b _s = left( fracLatentHeatVSDiTCpm SDiT PD_ThetaLiqIce b _s - fracgravDMThetaVirt right) SDiThetaDry \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"where additional variable definitions are in:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Reference state profiles (pRef, rhoRef, and alphaRef).\nPotential temperatures (ThetaDry, ThetaVirt).\nPhase partition PhasePartition qt qv ql qi qvsat.\nLatent heat (LatentHeatVT).","category":"page"},{"location":"Atmos/EDMFEquations/#(\\qt,-\\eint,-\\rhoRef{})-formulation-2","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"(qt eint rhoRef)-formulation","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Pending.","category":"page"},{"location":"Atmos/EDMFEquations/#Surface-fluxes-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Surface fluxes","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"todo: Todo\nAdd definitions for universal functions (e.g., Psi_m).","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Variables in this section must be computed simultaneously because it requires the solution of a non-linear equation.","category":"page"},{"location":"Atmos/EDMFEquations/#Monin-Obhukov-length-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Monin-Obhukov length","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"NOTE: All variables (Monin-Obhukov length, friction velocity, temperature scale) in Surface fluxes must be solved simultaneously","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalignlabeleqMOLen\nMOLen = begincases\n- fracFrictionVelocity^3 thetaVKConst grav SurfaceHeatFlux  SurfaceHeatFlux  0 \n0  textotherwise \nendcases \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#Friction-velocity-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Friction velocity","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"NOTE: All variables (Monin-Obhukov length, friction velocity, temperature scale) in Surface fluxes must be solved simultaneously","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Knowns: u_mathrmave = sqrtDMu^2+DMv^2 LayerThickness SurfaceRoughnessm\nUnknowns: FrictionVelocity MOLen, and SurfaceMomentumFlux","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalignlabeleqFrictionVelocity\nu_mathrmave      = fracFrictionVelocityVKConst    left logleft(fracLayerThicknessSurfaceRoughnessmright) - Psi_mleft(fracLayerThicknessMOLenright) + fracSurfaceRoughnessmLayerThickness Psi_mleft(fracSurfaceRoughnessmMOLenright) + R_z0m left psi_mleft(fracSurfaceRoughnessmMOLenright) - 1 right right \nR_z0m               = 1 - SurfaceRoughnesshLayerThickness \nSurfaceMomentumFlux  = -FrictionVelocity^2                 labeleqSurfaceMomentumFlux  \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"where Psi_m is defined in Appendix A, equations A6 in Nishizawa, S., and Y. Kitamura. \"A Surface Flux Scheme Based on the Monin‐Obukhov Similarity for Finite Volume Models.\" Journal of Advances in Modeling Earth Systems 10.12 (2018): 3159-3175.","category":"page"},{"location":"Atmos/EDMFEquations/#Temperature-scale-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Temperature scale","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"NOTE: All variables (Monin-Obhukov length, friction velocity, temperature scale) in Surface fluxes must be solved simultaneously","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Knowns: theta_mathrmave theta_s LayerThickness SurfaceRoughnessh\nUnknowns: FrictionVelocity MOLen, and SurfaceHeatFlux","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalignlabeleqTemperatureScale\ntheta_mathrmave - theta_s  = fracPr TemperatureScaleVKConst left logleft(fracLayerThicknessSurfaceRoughnesshright) - Psi_hleft(fracLayerThicknessMOLenright) + fracSurfaceRoughnesshLayerThickness Psi_mleft(fracSurfaceRoughnesshMOLenright) + R_z0h left psi_hleft(fracSurfaceRoughnesshMOLenright) - 1 right right \nR_z0h                           = 1 - SurfaceRoughnesshLayerThickness \nSurfaceHeatFlux                  = -FrictionVelocityTemperatureScale  labeleqSurfaceHeatFlux  \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"where Psi_h is defined in Appendix A, equation A6 in Nishizawa, S., and Y. Kitamura. \"A Surface Flux Scheme Based on the Monin‐Obukhov Similarity for Finite Volume Models.\" Journal of Advances in Modeling Earth Systems 10.12 (2018): 3159-3175.","category":"page"},{"location":"Atmos/EDMFEquations/#Prandtl-number-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Prandtl number","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalignlabeleqPrandtlNumber\nPr_neut = 074 \nPr(z) = begincases\n    Pr_neut  MOLen  0 \n    Pr_neut left frac1 + omega_2 R_g - sqrt-4 R_g + (1+omega_2 R_g)^22 R_g right  textotherwise \nendcases \nomega_2 = omega_1+1 \nomega_1 = frac4013 \nR_g = fracBuoyancyGradS^2 \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"where additional variable definitions are in:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Shear production (S).\nMonin-Obhukov length (MOLen).\nBuoyancy gradient (BuoyancyGrad).","category":"page"},{"location":"Atmos/EDMFEquations/#Mixing-length-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Mixing length","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"note: Note\nThese mixing length have been tested for the environment, not the updrafts","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalignlabeleqMixingLength\nSDiol_mix^m = fracsum_j l_j e^-l_jsum_j e^-l_j qquad j = 123 \nl_1 = fracsqrtc_wSDeTKESDeN \nc_w = 04 \nSDeN = fracgrav PD_z SDeThetaVirtSDeThetaVirt  qquad text(buoyancy frequency of environment) \nl_2 = fracVKConst zc_K kappa^* phi_m(zMOLen) \nphi_m(xi) = left( 1 + a_l xi right)^-b_l \n(a_l b_l) =\nbegincases\n  (-100 02)  MOLen  0 \n  (27 -1)  textotherwise \nendcases \nkappa^* = fracFrictionVelocitysqrtSDeTKE \nl_3 = sqrtfracc_varepsilonc_K sqrtSDeTKE\nleft max(S^2 - frac1Pr(z) BuoyancyGrad 0) right^-12 \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"where additional variable definitions are in:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Constants.\nShear production (S).\nMonin-Obhukov length (MOLen).\nFriction velocity (FrictionVelocity).\nBuoyancy gradient (BuoyancyGrad).\nPotential temperatures (ThetaDry, ThetaVirt).\nPrandtl number (Pr).","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Smoothing function is provided in python file. The Prandtl number was used from Eq. 75 in Dan Li 2019 \"Turbulent Prandtl number in the atmospheric BL - where are we now\".","category":"page"},{"location":"Atmos/EDMFEquations/#Eddy-diffusivity-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy diffusivity","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalignlabeleqEddyDiffusivity\nSDiKm  = begincases\nc_K SDiol_mix sqrtSDiTKE  i = iEnv \n0  textotherwise\nendcases \nSDiKh  = fracSDiKmPr \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"where additional variable definitions are in:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Constants.\nMixing length (l_mix).\nPrandtl number (Pr).","category":"page"},{"location":"Atmos/EDMFEquations/#Buoyancy-flux-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Buoyancy flux","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"todo: Todo\nCurrently, BuoyancyFlux is hard-coded from the first expression (which was used in SCAMPy), however, this value should be computed from the SurfaceFluxes section.","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalignlabeleqBuoyancyFlux\nSurfaceBuoyancyFlux  = fracgrav BCalphaRefCpm BCSDiT (SensibleSurfaceHeatFlux + (EpsDV - 1) Cpm BCSDiT LatentSurfaceHeatFlux  LatentHeatVBCSDiT) \nBuoyancyFlux  = - SDiKh SDiBuoyancyGrad \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Eddy diffusivity (Km Kh).\nLatent heat (LatentHeatVT).\nBuoyancy gradient (BuoyancyGrad).\nSpecific heats Cpm and Cvm.","category":"page"},{"location":"Atmos/EDMFEquations/#Entrainment-Detrainment-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Entrainment-Detrainment","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Entrainment (epsilon_i)","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalignlabeleqEntrainment\nepsilon_i = c_epsilon fracmax(SDib 0)SDiw^2 \nc_epsilon = 012 \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Detrainment (delta_j):","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalignlabeleqDetrainment\ndelta_i = c_delta fracmin(SDib 0)SDiw^2 + delta_B Heaviside(SDiql) \nc_delta = c_delta0 + Gamma(aSDia) \nGamma(aSDia) = 0 \nc_delta0 = c_epsilon = 012 \ndelta_B = 0004 m^-1 \nHeaviside = textHeaviside function \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"where additional variable definitions are in:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Reference state profiles (pRef, rhoRef, and alphaRef).\nTemperature (T and TDry).\nBuoyancy (Buoyancy).","category":"page"},{"location":"Atmos/EDMFEquations/#Inversion-height-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Inversion height","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalignlabeleqInversionHeight\nSDioInversionHeight =\nbegincases\n  left (PD_z ThetaRho)^-1 (BCThetaRho - ThetaRho_z_1) + z_1 right  simparamBCDMu^2 + simparamBCDMv^2 = texttol_InversionHeightmathrm-stable \n  left (PD_z Ri_bulk)^-1 (hyperparamRi_bulk crit - Ri_bulk_z_2) + z_2 right  textotherwise \nendcases \nz_1 = min_z (ThetaRho(z)  BCThetaRho) \nz_2 = min_z (Ri_bulk(z)  hyperparamRi_bulk crit) \nRi_bulk = grav z frac(ThetaRhoBCThetaRho - 1)simparamDMu^2 + simparamDMv^2 \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"where additional variable definitions are in:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Potential temperatures (theta).","category":"page"},{"location":"Atmos/EDMFEquations/#Convective-velocity-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Convective velocity","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalignlabeleqConvectiveVelocity\nSDioConvectiveVelocity = (max(BuoyancyFlux SDioInversionHeight 0))^13 \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"where additional variable definitions are in:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Inversion height (SDioInversionHeight).\nBuoyancy flux (BuoyancyFlux).","category":"page"},{"location":"Atmos/EDMFEquations/#Non-local-mixing-length-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Non-local mixing length","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalignlabeleqMixingLengthOld\nSDiol_mix = (l_A^-1 + l_B^-1)^-1 \nl_A = VKConst z left( 1 + a_l fraczMOLen right)^b_l \nSDiol_B = SDiotau SDiTKE \n(a_l b_l) =\nbegincases\n  (-100 02)  MOLen  0 \n  (27 -1)  textotherwise \nendcases \nSDiotau = SDioInversionHeightSDioConvectiveVelocity \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"where additional variable definitions are in:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Inversion height (SDioInversionHeight).\nMonin-Obhukov length (MOLen).\nConvective velocity (SDioConvectiveVelocity).","category":"page"},{"location":"Atmos/EDMFEquations/#Boundary-Conditions-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Boundary Conditions","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Here, we specify boundary conditions (BCs) by their type, Dirichlet (D) or Neumann (N), and their value.","category":"page"},{"location":"Atmos/EDMFEquations/#BC-functions-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"BC functions","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\nGamma_phi(F_1 F_2)\n = begincases\n    4 fracF_1 F_2FrictionVelocity^2 (1 - 83zLLMOLen)^-23  MOLen  0 \n    4 fracF_1 F_2FrictionVelocity^2  textotherwise\nendcases \nGamma_TKE\n = begincases\n    375 FrictionVelocity^2 + 02 ConvectiveVelocity^2 + FrictionVelocity^2 (-zLLMOLen)^23  MOLen  0 \n    375 FrictionVelocity^2  textotherwise\nendcases \nSensibleSurfaceHeatFlux  = BCTCVweint Cpm rhoRef \nLatentSurfaceHeatFlux    = BCTCVwqt  LatentHeatVT rhoRef \nF_eint(SensibleSurfaceHeatFlux)   = fracSensibleSurfaceHeatFluxCpm       = BCTCVweint rhoRef \nF_qt(LatentSurfaceHeatFlux)       = fracLatentSurfaceHeatFluxLatentHeatVT = BCTCVwqt   rhoRef \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"where additional variable definitions are in:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Reference state profiles (pRef, rhoRef, and alphaRef).\nMonin-Obhukov length (MOLen).\nConvective velocity (SDioConvectiveVelocity).\nFriction velocity (FrictionVelocity).\nLatent heat (LatentHeatVT).","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"and equation \\eqref{eq:TopPercentile} represents the mean of the top x-fraction of a standard normal distribution (Neggers et al., 2009).","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\nPhi^-1(x)  = textinverse cumulative distribution function labeleqInverseCDF \nmathcal D(x) = frac1sqrt2pi x exp- frac12 (Phi^-1(1-x))^2   labeleqTopPercentile \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#Area-fraction-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Area fraction","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\nc_frac = 01 quad\nBCBaSDia =\nbegincases\n    1-c_frac  i = iEnv \n  fracc_fracNsd  i ne iEnv\nendcases quad\nBCTaSDia =\nbegincases\n    1-c_frac  i = iEnv \n  fracc_fracNsd  i ne iEnv\nendcases\nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#st-order-moments-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"1st order moments","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Top boundary","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\nBCTSDiw           = 0 \nPD_z BCTSDiqt   = 0 \nPD_z BCTSDieint = 0 \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Bottom boundary","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"todo: Todo\nNeed value for C_eint.","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\nBCBSDiw     = 0 \n- SDiKh PD_z BCBSDiqt   = TCVwqt   + mathcal D(aSDia) sqrtC_qt^2   WindSpeed^2Gamma_phi(TCVwqt   TCVwqt   ) \n- SDiKh PD_z BCBSDieint = TCVweint + mathcal D(aSDia) sqrtC_eint^2 WindSpeed^2Gamma_phi(TCVweint TCVweint ) \nC_qt = 0001133 \nC_ThetaLiqIce = 0001094 \nC_eint =  \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"where additional variable/function definitions are in:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"BC functions mathcal D.","category":"page"},{"location":"Atmos/EDMFEquations/#nd-order-moments-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"2nd order moments","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Top boundary","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\nBCTSDiTKE                          = 0 \nPD_z BCTIntraCVSDiqtqt        = 0 \nPD_z BCTIntraCVSDieinteint    = 0 \nPD_z BCTIntraCVSDieintqt      = 0 \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"todo: Todo\nCurrently, we only account for the intra sub-domain covariance, but we would like to also account for the inter sub-domain covariance for all but the TKE.","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Bottom boundary","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"beginalign\nBCBSDiTKE                    = Gamma_TKE \nBCBIntraCVSDiqtqt        = Gamma_phi(TCVwqt   TCVwqt   ) \nBCBIntraCVSDieinteint    = Gamma_phi(TCVwqt   TCVweint ) \nBCBIntraCVSDieintqt      = Gamma_phi(TCVweint TCVweint ) \nendalign","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"where additional variable/function definitions are in:","category":"page"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"BC functions Gamma_TKE, Gamma_phi, F_eint, SensibleSurfaceHeatFlux, F_qt, LatentSurfaceHeatFlux.","category":"page"},{"location":"Atmos/EDMFEquations/#Case-specific-configurations-1","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Case-specific configurations","text":"","category":"section"},{"location":"Atmos/EDMFEquations/#","page":"Eddy-Diffusivity Mass-Flux (EDMF) equations","title":"Eddy-Diffusivity Mass-Flux (EDMF) equations","text":"Case Variable Value Reference\nBomex BCp_s 1000 [hPa] \nBomex BCDMqt 5 [g/kg] \nBomex BCDMThetaLiqIce 300 [K] \nBomex BCTCVwqt 52 times 10^-5 m s^-1 \nBomex BCTCVwThetaLiqIce 8 times 10^-3 K m s^-1 \nSoares BCTCVwqt 25 times 10^-5 m s^-1 \nSoares BCTCVwThetaLiqIce 6 times 10^-2 K m s^-1 \n   ","category":"page"},{"location":"BalanceLawOverview/#DG-Balance-Law-Method-1","page":"DG Balance Law Method","title":"DG Balance Law Method","text":"","category":"section"},{"location":"BalanceLawOverview/#Continuous-Balance-Law-Formulation-1","page":"DG Balance Law Method","title":"Continuous Balance Law Formulation","text":"","category":"section"},{"location":"BalanceLawOverview/#","page":"DG Balance Law Method","title":"DG Balance Law Method","text":"to be filled","category":"page"},{"location":"BalanceLawOverview/#Discontinuous-Galerkin-Method-Formulation-1","page":"DG Balance Law Method","title":"Discontinuous Galerkin Method Formulation","text":"","category":"section"},{"location":"BalanceLawOverview/#","page":"DG Balance Law Method","title":"DG Balance Law Method","text":"to be filled","category":"page"},{"location":"BalanceLawOverview/#Examples-1","page":"DG Balance Law Method","title":"Examples","text":"","category":"section"},{"location":"BalanceLawOverview/#","page":"DG Balance Law Method","title":"DG Balance Law Method","text":"attribution: Attribution\nThe style of examples we use here is heavily inspired by JuAFEM.jl","category":"page"},{"location":"BalanceLawOverview/#","page":"DG Balance Law Method","title":"DG Balance Law Method","text":"to be filled","category":"page"},{"location":"InputOutput/#InputOutput-1","page":"InputOutput","title":"InputOutput","text":"","category":"section"},{"location":"InputOutput/#","page":"InputOutput","title":"InputOutput","text":"CurrentModule = CLIMA","category":"page"},{"location":"InputOutput/#VTK-1","page":"InputOutput","title":"VTK","text":"","category":"section"},{"location":"InputOutput/#Functions-1","page":"InputOutput","title":"Functions","text":"","category":"section"},{"location":"InputOutput/#","page":"InputOutput","title":"InputOutput","text":"VTK.writevtk\nVTK.writevtk_helper","category":"page"},{"location":"InputOutput/#CLIMA.VTK.writevtk","page":"InputOutput","title":"CLIMA.VTK.writevtk","text":"writevtk(prefix, Q::MPIStateArray, disc::DGBalanceLaw [, fieldnames])\n\nWrite a vtk file for all the fields in the state array Q using geometry and connectivity information from disc.grid. The filename will start with prefix which may also contain a directory path. The names used for each of the fields in the vtk file can be specified through the collection of strings fieldnames; if not specified the fields names will be \"Q1\" through \"Qk\" where k is the number of states in Q, i.e., k = size(Q,2).\n\n\n\n\n\nwritevtk(prefix, Q::MPIStateArray, disc::DGBalanceLaw, fieldnames,\n         auxstate::MPIStateArray, auxfieldnames)\n\nWrite a vtk file for all the fields in the state array Q and auxiliary state auxstate using geometry and connectivity information from disc.grid. The filename will start with prefix which may also contain a directory path. The names used for each of the fields in the vtk file can be specified through the collection of strings fieldnames and auxfieldnames.\n\nIf fieldnames === nothing then the fields names will be \"Q1\" through \"Qk\" where k is the number of states in Q, i.e., k = size(Q,2).\n\nIf auxfieldnames === nothing then the fields names will be \"aux1\" through \"auxk\" where k is the number of states in auxstate, i.e., k = size(auxstate,2).\n\n\n\n\n\nwritegrid(prefix, grid::DiscontinuousSpectralElementGrid)\n\nWrite a vtk file for the grid.  The filename will start with prefix which may also contain a directory path.\n\n\n\n\n\n","category":"function"},{"location":"InputOutput/#CLIMA.VTK.writevtk_helper","page":"InputOutput","title":"CLIMA.VTK.writevtk_helper","text":"writevtk_helper(prefix, vgeo::Array, Q::Array, grid, fieldnames)\n\nInternal helper function for writevtk\n\n\n\n\n\n","category":"function"},{"location":"AcceptableUnicode/#Acceptable-Unicode-characters-1","page":"Acceptable Unicode characters","title":"Acceptable Unicode characters","text":"","category":"section"},{"location":"AcceptableUnicode/#","page":"Acceptable Unicode characters","title":"Acceptable Unicode characters","text":"Using Unicode seems to be irresistible. However, we must ensure avoiding problematic Unicode usage.","category":"page"},{"location":"AcceptableUnicode/#","page":"Acceptable Unicode characters","title":"Acceptable Unicode characters","text":"Below is a list of acceptable Unicode characters. All characters not listed below are forbidden. We forbid the use of accents (dot, hat, vec, etc.), because this can lead to visually ambiguous characters.","category":"page"},{"location":"AcceptableUnicode/#Acceptable-lower-case-Greek-letters-1","page":"Acceptable Unicode characters","title":"Acceptable lower-case Greek letters","text":"","category":"section"},{"location":"AcceptableUnicode/#","page":"Acceptable Unicode characters","title":"Acceptable Unicode characters","text":"α # (alpha)\nβ # (beta)\nδ # (delta)\nϵ # (epsilon)\nε # (varepsilon)\nγ # (gamma)\nκ # (kappa)\nλ # (lambda)\nμ # (mu)\nν # (nu)\nη # (eta)\nω # (omega)\nπ # (pi)\nρ # (rho)\nσ # (sigma)\nθ # (theta)\nχ # (chi)\nξ # (xi)\nζ # (zeta)\nϕ # (psi)\nφ # (varphi)","category":"page"},{"location":"AcceptableUnicode/#Acceptable-upper-case-Greek-letters-1","page":"Acceptable Unicode characters","title":"Acceptable upper-case Greek letters","text":"","category":"section"},{"location":"AcceptableUnicode/#","page":"Acceptable Unicode characters","title":"Acceptable Unicode characters","text":"Δ # (Delta)\n∑ # (Sigma)\nΓ # (Gamma)\nΩ # (Omega)\nΨ # (Psi)\n<!-- Φ # (Phi) removed in favor of lowercase psi -->","category":"page"},{"location":"AcceptableUnicode/#Acceptable-mathematical-symbols-1","page":"Acceptable Unicode characters","title":"Acceptable mathematical symbols","text":"","category":"section"},{"location":"AcceptableUnicode/#","page":"Acceptable Unicode characters","title":"Acceptable Unicode characters","text":"∫ # (int)\n∬ # (iint)\n∭ # (iiint)\n∞ # (infinity)\n≈ # (approx)\n∂ # (partial)\n∇ # (nabla/del), note that nabla and del are indistinguishable\n∀ # (forall)\n≥ # (greater than equal to)\n≤ # (less than equal to)\n<!-- ∈ # (in) removed in favor of epsilon -->","category":"page"},{"location":"ODESolvers/#ODESolvers-1","page":"ODESolvers","title":"ODESolvers","text":"","category":"section"},{"location":"ODESolvers/#","page":"ODESolvers","title":"ODESolvers","text":"CurrentModule = CLIMA","category":"page"},{"location":"ODESolvers/#LowStorageRungeKutta-1","page":"ODESolvers","title":"LowStorageRungeKutta","text":"","category":"section"},{"location":"ODESolvers/#","page":"ODESolvers","title":"ODESolvers","text":"ODESolvers.LowStorageRungeKutta2N\nODESolvers.LSRK54CarpenterKennedy\nODESolvers.LSRK144NiegemannDiehlBusch","category":"page"},{"location":"ODESolvers/#CLIMA.ODESolvers.LowStorageRungeKutta2N","page":"ODESolvers","title":"CLIMA.ODESolvers.LowStorageRungeKutta2N","text":"LowStorageRungeKutta2N(f, RKA, RKB, RKC, Q; dt, t0 = 0)\n\nThis is a time stepping object for explicitly time stepping the differential equation given by the right-hand-side function f with the state Q, i.e.,\n\n  dotQ = f(Q t)\n\nwith the required time step size dt and optional initial time t0.  This time stepping object is intended to be passed to the solve! command.\n\nThe constructor builds a low-storage Runge-Kutta scheme using 2N storage based on the provided RKA, RKB and RKC coefficient arrays.\n\nThe available concrete implementations are:\n\nLSRK54CarpenterKennedy\nLSRK144NiegemannDiehlBusch\n\n\n\n\n\n","category":"type"},{"location":"ODESolvers/#CLIMA.ODESolvers.LSRK54CarpenterKennedy","page":"ODESolvers","title":"CLIMA.ODESolvers.LSRK54CarpenterKennedy","text":"LSRK54CarpenterKennedy(f, Q; dt, t0 = 0)\n\nThis function returns a LowStorageRungeKutta2N time stepping object for explicitly time stepping the differential equation given by the right-hand-side function f with the state Q, i.e.,\n\n  dotQ = f(Q t)\n\nwith the required time step size dt and optional initial time t0.  This time stepping object is intended to be passed to the solve! command.\n\nThis uses the fourth-order, low-storage, Runge–Kutta scheme of Carpenter and Kennedy (1994) (in their notation (5,4) 2N-Storage RK scheme).\n\nReferences\n\n@TECHREPORT{CarpenterKennedy1994,\n  author = {M.~H. Carpenter and C.~A. Kennedy},\n  title = {Fourth-order {2N-storage} {Runge-Kutta} schemes},\n  institution = {National Aeronautics and Space Administration},\n  year = {1994},\n  number = {NASA TM-109112},\n  address = {Langley Research Center, Hampton, VA},\n}\n\n\n\n\n\n","category":"function"},{"location":"ODESolvers/#CLIMA.ODESolvers.LSRK144NiegemannDiehlBusch","page":"ODESolvers","title":"CLIMA.ODESolvers.LSRK144NiegemannDiehlBusch","text":"LSRK144NiegemannDiehlBusch((f, Q; dt, t0 = 0)\n\nThis function returns a LowStorageRungeKutta2N time stepping object for explicitly time stepping the differential equation given by the right-hand-side function f with the state Q, i.e.,\n\n  dotQ = f(Q t)\n\nwith the required time step size dt and optional initial time t0.  This time stepping object is intended to be passed to the solve! command.\n\nThis uses the fourth-order, 14-stage, low-storage, Runge–Kutta scheme of Niegemann, Diehl, and Busch (2012) with optimized stability region\n\nReferences\n\n@article{niegemann2012efficient,\n  title={Efficient low-storage Runge--Kutta schemes with optimized stability regions},\n  author={Niegemann, Jens and Diehl, Richard and Busch, Kurt},\n  journal={Journal of Computational Physics},\n  volume={231},\n  number={2},\n  pages={364--372},\n  year={2012},\n  publisher={Elsevier}\n}\n\n\n\n\n\n","category":"function"},{"location":"ODESolvers/#StrongStabilityPreservingRungeKutta-1","page":"ODESolvers","title":"StrongStabilityPreservingRungeKutta","text":"","category":"section"},{"location":"ODESolvers/#","page":"ODESolvers","title":"ODESolvers","text":"ODESolvers.StrongStabilityPreservingRungeKutta\nODESolvers.SSPRK33ShuOsher\nODESolvers.SSPRK34SpiteriRuuth","category":"page"},{"location":"ODESolvers/#CLIMA.ODESolvers.StrongStabilityPreservingRungeKutta","page":"ODESolvers","title":"CLIMA.ODESolvers.StrongStabilityPreservingRungeKutta","text":"StrongStabilityPreservingRungeKutta(f, RKA, RKB, RKC, Q; dt, t0 = 0)\n\nThis is a time stepping object for explicitly time stepping the differential equation given by the right-hand-side function f with the state Q, i.e.,\n\n  dotQ = f(Q t)\n\nwith the required time step size dt and optional initial time t0.  This time stepping object is intended to be passed to the solve! command.\n\nThe constructor builds a strong-stability-preserving Runge–Kutta scheme based on the provided RKA, RKB and RKC coefficient arrays.\n\nThe available concrete implementations are:\n\nSSPRK33ShuOsher\nSSPRK34SpiteriRuuth\n\n\n\n\n\n","category":"type"},{"location":"ODESolvers/#CLIMA.ODESolvers.SSPRK33ShuOsher","page":"ODESolvers","title":"CLIMA.ODESolvers.SSPRK33ShuOsher","text":"SSPRK33ShuOsher(f, Q; dt, t0 = 0)\n\nThis function returns a StrongStabilityPreservingRungeKutta time stepping object for explicitly time stepping the differential equation given by the right-hand-side function f with the state Q, i.e.,\n\n  dotQ = f(Q t)\n\nwith the required time step size dt and optional initial time t0.  This time stepping object is intended to be passed to the solve! command.\n\nThis uses the third-order, 3-stage, strong-stability-preserving, Runge–Kutta scheme of Shu and Osher (1988)\n\nReferences\n\n@article{shu1988efficient,\n  title={Efficient implementation of essentially non-oscillatory shock-capturing schemes},\n  author={Shu, Chi-Wang and Osher, Stanley},\n  journal={Journal of computational physics},\n  volume={77},\n  number={2},\n  pages={439--471},\n  year={1988},\n  publisher={Elsevier}\n}\n\n\n\n\n\n","category":"function"},{"location":"ODESolvers/#CLIMA.ODESolvers.SSPRK34SpiteriRuuth","page":"ODESolvers","title":"CLIMA.ODESolvers.SSPRK34SpiteriRuuth","text":"SSPRK34SpiteriRuuth(f, Q; dt, t0 = 0)\n\nThis function returns a StrongStabilityPreservingRungeKutta time stepping object for explicitly time stepping the differential equation given by the right-hand-side function f with the state Q, i.e.,\n\n  dotQ = f(Q t)\n\nwith the required time step size dt and optional initial time t0.  This time stepping object is intended to be passed to the solve! command.\n\nThis uses the third-order, 4-stage, strong-stability-preserving, Runge–Kutta scheme of Spiteri and Ruuth (1988)\n\nReferences\n\n@article{spiteri2002new,\n  title={A new class of optimal high-order strong-stability-preserving time discretization methods},\n  author={Spiteri, Raymond J and Ruuth, Steven J},\n  journal={SIAM Journal on Numerical Analysis},\n  volume={40},\n  number={2},\n  pages={469--491},\n  year={2002},\n  publisher={SIAM}\n}\n\n\n\n\n\n","category":"function"},{"location":"ODESolvers/#AdditiveRungeKutta-1","page":"ODESolvers","title":"AdditiveRungeKutta","text":"","category":"section"},{"location":"ODESolvers/#","page":"ODESolvers","title":"ODESolvers","text":"ODESolvers.AdditiveRungeKutta\nODESolvers.ARK2GiraldoKellyConstantinescu\nODESolvers.ARK548L2SA2KennedyCarpenter\nODESolvers.ARK437L2SA1KennedyCarpenter","category":"page"},{"location":"ODESolvers/#CLIMA.ODESolvers.AdditiveRungeKutta","page":"ODESolvers","title":"CLIMA.ODESolvers.AdditiveRungeKutta","text":"AdditiveRungeKutta(f, l, linearsolver, RKAe, RKAi, RKB, RKC, Q;\n                   split_nonlinear_linear, variant, dt, t0 = 0)\n\nThis is a time stepping object for implicit-explicit time stepping of a decomposed differential equation. When split_nonlinear_linear == false the equation is assumed to be decomposed as\n\n  dotQ = l(Q t) + f(Q t) - l(Q t)\n\nwhere Q is the state, f is the full tendency and l is the chosen linear operator. When split_nonlinear_linear == true the assumed decomposition is\n\n  dotQ = l(Q t) + f(Q t)\n\nwhere f is now only the nonlinear tendency. For both decompositions the linear operator l is integrated implicitly whereas the remaining part is integrated explicitly. Other arguments are the required time step size dt and the optional initial time t0. The resulting linear systems are solved using the provided linearsolver solver. This time stepping object is intended to be passed to the solve! command.\n\nThe constructor builds an additive Runge–Kutta scheme based on the provided RKAe, RKAi, RKB and RKC coefficient arrays.  Additionally variant specifies which of the analytically equivalent but numerically different formulations of the scheme is used.\n\nThe available concrete implementations are:\n\nARK2GiraldoKellyConstantinescu\nARK548L2SA2KennedyCarpenter\nARK437L2SA1KennedyCarpenter\n\n\n\n\n\n","category":"type"},{"location":"ODESolvers/#CLIMA.ODESolvers.ARK2GiraldoKellyConstantinescu","page":"ODESolvers","title":"CLIMA.ODESolvers.ARK2GiraldoKellyConstantinescu","text":"ARK2GiraldoKellyConstantinescu(f, l, linearsolver, Q; dt, t0,\n                               split_nonlinear_linear, variant, paperversion)\n\nThis function returns an AdditiveRungeKutta time stepping object, see the documentation of AdditiveRungeKutta for arguments definitions. This time stepping object is intended to be passed to the solve! command.\n\npaperversion=true uses the coefficients from the paper, paperversion=false uses coefficients that make the scheme (much) more stable but less accurate\n\nThis uses the second-order-accurate 3-stage additive Runge–Kutta scheme of Giraldo, Kelly and Constantinescu (2013).\n\nReferences\n\n@article{giraldo2013implicit,\n  title={Implicit-explicit formulations of a three-dimensional\n         nonhydrostatic unified model of the atmosphere ({NUMA})},\n  author={Giraldo, Francis X and Kelly, James F and Constantinescu, Emil M},\n  journal={SIAM Journal on Scientific Computing},\n  volume={35},\n  number={5},\n  pages={B1162--B1194},\n  year={2013},\n  publisher={SIAM}\n}\n\n\n\n\n\n","category":"function"},{"location":"ODESolvers/#CLIMA.ODESolvers.ARK548L2SA2KennedyCarpenter","page":"ODESolvers","title":"CLIMA.ODESolvers.ARK548L2SA2KennedyCarpenter","text":"ARK548L2SA2KennedyCarpenter(f, l, linearsolver, Q; dt, t0,\n                            split_nonlinear_linear, variant)\n\nThis function returns an AdditiveRungeKutta time stepping object, see the documentation of AdditiveRungeKutta for arguments definitions. This time stepping object is intended to be passed to the solve! command.\n\nThis uses the fifth-order-accurate 8-stage additive Runge–Kutta scheme of Kennedy and Carpenter (2013).\n\nReferences\n\n@article{kennedy2019higher,\n  title={Higher-order additive Runge--Kutta schemes for ordinary\n         differential equations},\n  author={Kennedy, Christopher A and Carpenter, Mark H},\n  journal={Applied Numerical Mathematics},\n  volume={136},\n  pages={183--205},\n  year={2019},\n  publisher={Elsevier}\n}\n\n\n\n\n\n","category":"function"},{"location":"ODESolvers/#CLIMA.ODESolvers.ARK437L2SA1KennedyCarpenter","page":"ODESolvers","title":"CLIMA.ODESolvers.ARK437L2SA1KennedyCarpenter","text":"ARK437L2SA1KennedyCarpenter(f, l, linearsolver, Q; dt, t0,\n                            split_nonlinear_linear, variant)\n\nThis function returns an AdditiveRungeKutta time stepping object, see the documentation of AdditiveRungeKutta for arguments definitions. This time stepping object is intended to be passed to the solve! command.\n\nThis uses the fourth-order-accurate 7-stage additive Runge–Kutta scheme of Kennedy and Carpenter (2013).\n\nReferences\n\n@article{kennedy2019higher,\n  title={Higher-order additive Runge--Kutta schemes for ordinary\n         differential equations},\n  author={Kennedy, Christopher A and Carpenter, Mark H},\n  journal={Applied Numerical Mathematics},\n  volume={136},\n  pages={183--205},\n  year={2019},\n  publisher={Elsevier}\n}\n\n\n\n\n\n","category":"function"},{"location":"ODESolvers/#GenericCallbacks-1","page":"ODESolvers","title":"GenericCallbacks","text":"","category":"section"},{"location":"ODESolvers/#","page":"ODESolvers","title":"ODESolvers","text":"GenericCallbacks.GenericCallbacks\nGenericCallbacks.EveryXWallTimeSeconds\nGenericCallbacks.EveryXSimulationSteps","category":"page"},{"location":"ODESolvers/#CLIMA.GenericCallbacks","page":"ODESolvers","title":"CLIMA.GenericCallbacks","text":"A set of callback functions to be used with an AbstractODESolver\n\n\n\n\n\n","category":"module"},{"location":"ODESolvers/#CLIMA.GenericCallbacks.EveryXWallTimeSeconds","page":"ODESolvers","title":"CLIMA.GenericCallbacks.EveryXWallTimeSeconds","text":"EveryXWallTimeSeconds(f, time, mpicomm)\n\nThis callback will run the function 'f()' every time wallclock time seconds. The mpicomm is used to syncronize runtime across MPI ranks.\n\n\n\n\n\n","category":"type"},{"location":"ODESolvers/#CLIMA.GenericCallbacks.EveryXSimulationSteps","page":"ODESolvers","title":"CLIMA.GenericCallbacks.EveryXSimulationSteps","text":"EveryXSimulationSteps(f, steps)\n\nThis callback will run the function 'f()' every steps of the time stepper\n\n\n\n\n\n","category":"type"},{"location":"ODESolvers/#ODESolvers-2","page":"ODESolvers","title":"ODESolvers","text":"","category":"section"},{"location":"ODESolvers/#","page":"ODESolvers","title":"ODESolvers","text":"ODESolvers.solve!\nODESolvers.gettime\nODESolvers.updatedt!","category":"page"},{"location":"ODESolvers/#CLIMA.ODESolvers.solve!","page":"ODESolvers","title":"CLIMA.ODESolvers.solve!","text":"solve!(Q, solver::AbstractODESolver; timeend,\n       stopaftertimeend=true, numberofsteps, callbacks)\n\nSolves an ODE using the solver starting from a state Q. The state Q is updated inplace. The final time timeend or numberofsteps must be specified.\n\nA series of optional callback functions can be specified using the tuple callbacks; see GenericCallbacks.\n\n\n\n\n\n","category":"function"},{"location":"ODESolvers/#CLIMA.ODESolvers.gettime","page":"ODESolvers","title":"CLIMA.ODESolvers.gettime","text":"gettime(solver::AbstractODESolver)\n\nReturns the current simulation time of the ODE solver solver\n\n\n\n\n\n","category":"function"},{"location":"ODESolvers/#CLIMA.ODESolvers.updatedt!","page":"ODESolvers","title":"CLIMA.ODESolvers.updatedt!","text":"updatedt!(solver::AbstractODESolver, dt)\n\nChange the time step size to dt for the ODE solver solver.\n\n\n\n\n\n","category":"function"},{"location":"Atmos/SurfaceFluxes/#Surface-Fluxes-1","page":"Surface Fluxes","title":"Surface Fluxes","text":"","category":"section"},{"location":"Atmos/SurfaceFluxes/#","page":"Surface Fluxes","title":"Surface Fluxes","text":"CurrentModule = CLIMA.SurfaceFluxes","category":"page"},{"location":"Atmos/SurfaceFluxes/#","page":"Surface Fluxes","title":"Surface Fluxes","text":"Surface flux functions, e.g. for buoyancy flux, friction velocity, and exchange coefficients.","category":"page"},{"location":"Atmos/SurfaceFluxes/#Byun1990-1","page":"Surface Fluxes","title":"Byun1990","text":"","category":"section"},{"location":"Atmos/SurfaceFluxes/#","page":"Surface Fluxes","title":"Surface Fluxes","text":"Compute surface fluxes using the approach in Byun (1990).","category":"page"},{"location":"Atmos/SurfaceFluxes/#Plots-1","page":"Surface Fluxes","title":"Plots","text":"","category":"section"},{"location":"Atmos/SurfaceFluxes/#","page":"Surface Fluxes","title":"Surface Fluxes","text":"using CLIMA.SurfaceFluxes.Byun1990\nusing Plots, LaTeXStrings\n\nRi_range = range(-1.2, stop=0.24, length=100)\nscales = [50,200,600,1000,10_000]\n\nz_0 = 1.0\nγ_m, γ_h = 15.0, 9.0\nβ_m, β_h = 4.8, 7.8\nPr_0 = 0.74\n\nplot(Ri_range,\n    [Byun1990.compute_exchange_coefficients(Ri,scale*z_0,z_0,γ_m,γ_h,β_m,β_h,Pr_0)[1]\n        for Ri in Ri_range, scale in scales],\n    xlabel=\"Bulk Richardson number (Ri_b)\", ylabel=\"Drag coefficient\", title=\"Momentum exchange coefficient\",\n    labels=scales, legendtitle=L\"z/z_0\")\n\nsavefig(\"exchange_byun1990_fig4a.svg\") # hide\nnothing # hide","category":"page"},{"location":"Atmos/SurfaceFluxes/#","page":"Surface Fluxes","title":"Surface Fluxes","text":"(Image: )","category":"page"},{"location":"Atmos/SurfaceFluxes/#","page":"Surface Fluxes","title":"Surface Fluxes","text":"Recreation of Figure 4(a) from Byun (1990)","category":"page"},{"location":"Atmos/SurfaceFluxes/#","page":"Surface Fluxes","title":"Surface Fluxes","text":"plot(Ri_range,\n    [Byun1990.compute_exchange_coefficients(Ri,scale*z_0,z_0,γ_m,γ_h,β_m,β_h,Pr_0)[2]\n        for Ri in Ri_range, scale in scales],\n    xlabel=\"Bulk Richardson number (Ri_b)\", ylabel=\"Exchange coefficient\", title=\"Heat exchange coefficient\",\n    labels=scales, legendtitle=L\"z/z_0\")\n\nsavefig(\"exchange_byun1990_fig4b.svg\") # hide\nnothing # hide","category":"page"},{"location":"Atmos/SurfaceFluxes/#","page":"Surface Fluxes","title":"Surface Fluxes","text":"(Image: )","category":"page"},{"location":"Atmos/SurfaceFluxes/#","page":"Surface Fluxes","title":"Surface Fluxes","text":"Recreation of Figure 4(b) from Byun (1990)","category":"page"},{"location":"Atmos/SurfaceFluxes/#Nishizawa2018-1","page":"Surface Fluxes","title":"Nishizawa2018","text":"","category":"section"},{"location":"Atmos/SurfaceFluxes/#Plots-2","page":"Surface Fluxes","title":"Plots","text":"","category":"section"},{"location":"Atmos/SurfaceFluxes/#","page":"Surface Fluxes","title":"Surface Fluxes","text":"using CLIMA.SurfaceFluxes.Nishizawa2018\nusing Plots, LaTeXStrings\n\na = 4.7\nθ = 350\nz_0 = 10\nu_ave = 10\nflux = 1\nΔz = range(10.0, stop=100.0, length=100)\nΨ_m_tol, tol_abs, iter_max = 1e-3, 1e-3, 10\nu_star = Nishizawa2018.compute_friction_velocity.(\n    u_ave, θ, flux, Δz, z_0, a, Ψ_m_tol, tol_abs, iter_max)\nplot(u_star, Δz, title = \"Friction velocity vs dz\", xlabel = \"Friction velocity\", ylabel = \"dz\")\nsavefig(\"friction_velocity.svg\") # hide\nnothing # hide","category":"page"},{"location":"Atmos/SurfaceFluxes/#","page":"Surface Fluxes","title":"Surface Fluxes","text":"(Image: )","category":"page"},{"location":"Atmos/SurfaceFluxes/#API-1","page":"Surface Fluxes","title":"API","text":"","category":"section"},{"location":"Atmos/SurfaceFluxes/#","page":"Surface Fluxes","title":"Surface Fluxes","text":"compute_buoyancy_flux\nByun1990.compute_MO_len\nByun1990.compute_friction_velocity\nByun1990.compute_exchange_coefficients\nNishizawa2018.compute_MO_len\nNishizawa2018.compute_friction_velocity\nNishizawa2018.compute_exchange_coefficients","category":"page"},{"location":"Atmos/SurfaceFluxes/#CLIMA.SurfaceFluxes.compute_buoyancy_flux","page":"Surface Fluxes","title":"CLIMA.SurfaceFluxes.compute_buoyancy_flux","text":"compute_buoyancy_flux(shf, lhf, T_b, qt_b, ql_b, qi_b, alpha0_0)\n\nComputes buoyancy flux given sensible heat flux shf, latent heat flux lhf, surface boundary temperature T_b, total specific humidity qt_b, liquid specific humidity ql_b, ice specific humidity qi_b and specific alpha0_0.\n\n\n\n\n\n","category":"function"},{"location":"Atmos/SurfaceFluxes/#CLIMA.SurfaceFluxes.Byun1990.compute_MO_len","page":"Surface Fluxes","title":"CLIMA.SurfaceFluxes.Byun1990.compute_MO_len","text":"compute_MO_len(u, flux)\n\nComputes the Monin-Obukhov length (Eq. 3 Ref. Byun1990)\n\n\n\n\n\n","category":"function"},{"location":"Atmos/SurfaceFluxes/#CLIMA.SurfaceFluxes.Byun1990.compute_friction_velocity","page":"Surface Fluxes","title":"CLIMA.SurfaceFluxes.Byun1990.compute_friction_velocity","text":"compute_friction_velocity(u_ave, flux, z_0, z_1, β_m, γ_m, tol_abs, iter_max)\n\nComputes roots of friction velocity equation (Eq. 10 in Ref. Byun1990)\n\nu_ave = u_* ( ln(z/z_0) - ψ_m(z/L, z_0/L) ) /κ        Eq. 10 in Ref. Byun1990\n\n\n\n\n\n","category":"function"},{"location":"Atmos/SurfaceFluxes/#CLIMA.SurfaceFluxes.Byun1990.compute_exchange_coefficients","page":"Surface Fluxes","title":"CLIMA.SurfaceFluxes.Byun1990.compute_exchange_coefficients","text":"compute_exchange_coefficients(Ri, z_b, z_0, γ_m, γ_h, β_m, β_h, Pr_0)\n\nComputes exchange transfer coefficients:\n\nC_D  momentum exchange coefficient      (Eq. 36)\nC_H  thermodynamic exchange coefficient (Eq. 37)\nL_mo Monin-Obukhov length               (re-arranged Eq. 3)\n\n\n\n\n\n","category":"function"},{"location":"Atmos/SurfaceFluxes/#CLIMA.SurfaceFluxes.Nishizawa2018.compute_MO_len","page":"Surface Fluxes","title":"CLIMA.SurfaceFluxes.Nishizawa2018.compute_MO_len","text":"compute_MO_len(u, θ, flux)\n\nComputes Monin-Obukhov length. Eq. 3 Ref. Nishizawa2018\n\n\n\n\n\n","category":"function"},{"location":"Atmos/SurfaceFluxes/#CLIMA.SurfaceFluxes.Nishizawa2018.compute_friction_velocity","page":"Surface Fluxes","title":"CLIMA.SurfaceFluxes.Nishizawa2018.compute_friction_velocity","text":"compute_friction_velocity(u_ave, θ, flux, Δz, z_0, a, Ψ_m_tol, tol_abs, iter_max)\n\nComputes friction velocity, in Eq. 12 in Ref. Nishizawa2018, by solving the non-linear equation:\n\nu_ave = ustar/κ * ( ln(Δz/z_0) - Ψ_m(Δz/L) + z_0/Δz * Ψ_m(z_0/L) + R_z0 [ψ_m(z_0/L) - 1] )\n\nwhere L is a non-linear function of ustar (see compute_MO_len).\n\n\n\n\n\n","category":"function"},{"location":"Atmos/SurfaceFluxes/#CLIMA.SurfaceFluxes.Nishizawa2018.compute_exchange_coefficients","page":"Surface Fluxes","title":"CLIMA.SurfaceFluxes.Nishizawa2018.compute_exchange_coefficients","text":"compute_exchange_coefficients(z, F_m, F_h, a, u_star, θ, flux, Pr)\n\nComputes exchange transfer coefficients:\n\nK_D  momentum exchange coefficient\nK_H  thermodynamic exchange coefficient\nL_mo Monin-Obukhov length\n\n\n\n\n\n","category":"function"},{"location":"Atmos/SurfaceFluxes/#References-1","page":"Surface Fluxes","title":"References","text":"","category":"section"},{"location":"Atmos/SurfaceFluxes/#","page":"Surface Fluxes","title":"Surface Fluxes","text":"Businger, Joost A., et al. \"Flux-profile relationships in the atmospheric surface layer.\" Journal of the atmospheric Sciences 28.2 (1971): 181-189. doi: 10.1175/1520-0469(1971)028<0181:FPRITA>2.0.CO;2\nNishizawa, S., and Y. Kitamura. \"A Surface Flux Scheme Based on the Monin-Obukhov Similarity for Finite Volume Models.\" Journal of Advances in Modeling Earth Systems 10.12 (2018): 3159-3175. doi: 10.1029/2018MS001534\nByun, Daewon W. \"On the analytical solutions of flux-profile relationships for the atmospheric surface layer.\" Journal of Applied Meteorology 29.7 (1990): 652-657. doi: 10.1175/1520-0450(1990)029<0652:OTASOF>2.0.CO;2\nWyngaard, John C. \"Modeling the planetary boundary layer-Extension to the stable case.\" Boundary-Layer Meteorology 9.4 (1975): 441-460. doi: 10.1007/BF00223393","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"EditURL = \"<unknown>/src/Atmos/Model/turbulence.jl\"","category":"page"},{"location":"Atmos/Model/turbulence/#Turbulence-Closures-1","page":"-","title":"Turbulence Closures","text":"","category":"section"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"In turbulence.jl we specify turbulence closures. Currently, pointwise models of the eddy viscosity/eddy diffusivity type are supported for turbulent shear and tracer diffusivity. Methods currently supported are:\nConstantViscosityWithDivergence\nSmagorinskyLilly\nVreman\nAnisoMinDiss\n","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"note: Note\nUsage: This is a quick-ref guide to using turbulence models as a subcomponent of AtmosModel \nnu is the kinematic viscosity, C_smag is the Smagorinsky Model coefficient, turbulence=ConstantViscosityWithDivergence(ν)\nturbulence=SmagorinskyLilly(C_smag)\nturbulence=Vreman(C_smag)\nturbulence=AnisoMinDiss(C_poincare)","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"using DocStringExtensions\nusing ..PlanetParameters: grav\nusing CLIMA.SubgridScaleParameters: inv_Pr_turb\nexport ConstantViscosityWithDivergence, SmagorinskyLilly, Vreman, AnisoMinDiss\nexport turbulence_tensors","category":"page"},{"location":"Atmos/Model/turbulence/#Abstract-Type-1","page":"-","title":"Abstract Type","text":"","category":"section"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"We define a TurbulenceClosure abstract type and default functions for the generic turbulence closure which will be overloaded with model specific functions.","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"abstract type TurbulenceClosure end\n\nvars_state(::TurbulenceClosure, FT) = @vars()\nvars_aux(::TurbulenceClosure, FT) = @vars()\n\nfunction atmos_init_aux!(\n    ::TurbulenceClosure,\n    ::AtmosModel,\n    aux::Vars,\n    geom::LocalGeometry,\n) end\nfunction atmos_nodal_update_aux!(\n    ::TurbulenceClosure,\n    ::AtmosModel,\n    state::Vars,\n    aux::Vars,\n    t::Real,\n) end\nfunction gradvariables!(\n    ::TurbulenceClosure,\n    transform::Vars,\n    state::Vars,\n    aux::Vars,\n    t::Real,\n) end\nfunction diffusive!(\n    ::TurbulenceClosure,\n    ::Orientation,\n    diffusive,\n    ∇transform,\n    state,\n    aux,\n    t,\n) end\n\n\"\"\"\n    ν, τ = turbulence_tensors(::TurbulenceClosure, state::Vars, diffusive::Vars, aux::Vars, t::Real)\n\nCompute the kinematic viscosity tensor (`ν`) and SGS momentum flux tensor (`τ`).\n\"\"\"\nfunction turbulence_tensors end","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"We also provide generic math functions for use within the turbulence closures, commonly used quantities such as the principal tensor invariants, handling of symmetric tensors and tensor normsare addressed.","category":"page"},{"location":"Atmos/Model/turbulence/#tensor-invariants-1","page":"-","title":"Pricipal Invariants","text":"","category":"section"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"\"\"\"\n    principal_invariants(X)\n\nCalculates principal invariants of a tensor `X`. Returns 3 element tuple containing the invariants.\n\"\"\"\nfunction principal_invariants(X)\n    first = tr(X)\n    second = (first^2 - tr(X .^ 2)) / 2\n    third = det(X)\n    return (first, second, third)\nend","category":"page"},{"location":"Atmos/Model/turbulence/#symmetric-tensors-1","page":"-","title":"Symmetrize","text":"","category":"section"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"fracmathrmX + mathrmX^T2","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"\"\"\"\n    symmetrize(X)\n\nCompute `(X + X')/2`, returning a `SHermitianCompact` object.\n\"\"\"\nfunction symmetrize(X::StaticArray{Tuple{3, 3}})\n    SHermitianCompact(SVector(\n        X[1, 1],\n        (X[2, 1] + X[1, 2]) / 2,\n        (X[3, 1] + X[1, 3]) / 2,\n        X[2, 2],\n        (X[3, 2] + X[2, 3]) / 2,\n        X[3, 3],\n    ))\nend","category":"page"},{"location":"Atmos/Model/turbulence/#tensor-norms-1","page":"-","title":"2-Norm","text":"","category":"section"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"sum_ij S_ij^2","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"\"\"\"\n    norm2(X)\n\nCompute","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"math \\sum{i,j} S{ij}^2","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"\"\"\"\nfunction norm2(X::SMatrix{3, 3, FT}) where {FT}\n    abs2(X[1, 1]) +\n    abs2(X[2, 1]) +\n    abs2(X[3, 1]) +\n    abs2(X[1, 2]) +\n    abs2(X[2, 2]) +\n    abs2(X[3, 2]) +\n    abs2(X[1, 3]) +\n    abs2(X[2, 3]) +\n    abs2(X[3, 3])\nend\nfunction norm2(X::SHermitianCompact{3, FT, 6}) where {FT}\n    abs2(X[1, 1]) +\n    2 * abs2(X[2, 1]) +\n    2 * abs2(X[3, 1]) +\n    abs2(X[2, 2]) +\n    2 * abs2(X[3, 2]) +\n    abs2(X[3, 3])\nend","category":"page"},{"location":"Atmos/Model/turbulence/#strain-rate-magnitude-1","page":"-","title":"Strain-rate Magnitude","text":"","category":"section"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"By definition, the strain-rate magnitude, as defined in standard turbulence modelling is computed such that","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"mathrmS = sqrt2 sum_ij mathrmS_ij^2","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"\"\"\"\n    strain_rate_magnitude(S)\n\nCompute","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"math |S| = \\sqrt{2\\sum{i,j} S{ij}^2}","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"\"\"\"\nfunction strain_rate_magnitude(S::SHermitianCompact{3, FT, 6}) where {FT}\n    return sqrt(2 * norm2(S))\nend","category":"page"},{"location":"Atmos/Model/turbulence/#constant-viscosity-1","page":"-","title":"Constant Viscosity Model","text":"","category":"section"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"ConstantViscosityWithDivergence requires a user to specify the constant viscosity (kinematic) and appropriately computes the turbulent stress tensor based on this term. Diffusivity can be computed using the turbulent Prandtl number for the appropriate problem regime.","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"tau = - 2 nu mathrmS","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"\"\"\"\n    ConstantViscosityWithDivergence <: TurbulenceClosure\n\nTurbulence with constant dynamic viscosity (`ρν`).\nDivergence terms are included in the momentum flux tensor.","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"Fields","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"$(DocStringExtensions.FIELDS)\n\"\"\"\nstruct ConstantViscosityWithDivergence{FT} <: TurbulenceClosure\n    \"Dynamic Viscosity [kg/m/s]\"\n    ρν::FT\nend\n\nvars_gradient(::ConstantViscosityWithDivergence, FT) = @vars()\nvars_diffusive(::ConstantViscosityWithDivergence, FT) =\n    @vars(S::SHermitianCompact{3, FT, 6})\n\nfunction diffusive!(\n    ::ConstantViscosityWithDivergence,\n    ::Orientation,\n    diffusive::Vars,\n    ∇transform::Grad,\n    state::Vars,\n    aux::Vars,\n    t::Real,\n)\n\n    diffusive.turbulence.S = symmetrize(∇transform.u)\nend\n\nfunction turbulence_tensors(\n    m::ConstantViscosityWithDivergence,\n    state::Vars,\n    diffusive::Vars,\n    aux::Vars,\n    t::Real,\n)\n\n    S = diffusive.turbulence.S\n    ν = m.ρν / state.ρ\n    τ = (-2 * ν) * S + (2 * ν / 3) * tr(S) * I\n    D_t = (ν isa Real ? ν : diag(ν)) * inv_Pr_turb\n    return ν, D_t, τ\nend","category":"page"},{"location":"Atmos/Model/turbulence/#smagorinsky-lilly-1","page":"-","title":"Smagorinsky-Lilly","text":"","category":"section"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"The Smagorinsky turbulence model, with Lilly's correction to stratified atmospheric flows, is included in CLIMA. The input parameter to this model is the Smagorinsky coefficient. For atmospheric flows, the coefficient C_smag typically takes values between 0.15 and 0.23. Flow dependent C_smag are currently not supported (e.g. Germano's extension). The Smagorinsky-Lilly model does not contain explicit filtered terms.","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"nu = (C_s mathrmf_b Delta)^2 sqrtmathrmS","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"with the stratification correction term","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"mathrmf_b = sqrt1 - fracmathrmRimathrmPr_t","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"\nmathrmRi and mathrmPr_t are the Richardson and turbulent Prandtl numbers respectively.  Delta is the mixing length in the relevant coordinate direction. We use the DG metric terms to determine the local effective resolution (see src/Mesh/Geometry.jl), and modify the vertical lengthscale by the stratification correction factor mathrmf_b.","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"\"\"\"\n    SmagorinskyLilly <: TurbulenceClosure\n\nSee § 1.3.2 in CliMA documentation\n\narticle{doi:10.1175/1520-0493(1963)091<0099:GCEWTP>2.3.CO;2,\n  author = {Smagorinksy, J.},\n  title = {General circulation experiments with the primitive equations},\n  journal = {Monthly Weather Review},\n  volume = {91},\n  number = {3},\n  pages = {99-164},\n  year = {1963},\n  doi = {10.1175/1520-0493(1963)091<0099:GCEWTP>2.3.CO;2},\n  URL = {https://doi.org/10.1175/1520-0493(1963)091<0099:GCEWTP>2.3.CO;2},\n  eprint = {https://doi.org/10.1175/1520-0493(1963)091<0099:GCEWTP>2.3.CO;2}\n  }\n\narticle{doi:10.1111/j.2153-3490.1962.tb00128.x,\n  author = {LILLY, D. K.},\n  title = {On the numerical simulation of buoyant convection},\n  journal = {Tellus},\n  volume = {14},\n  number = {2},\n  pages = {148-172},\n  doi = {10.1111/j.2153-3490.1962.tb00128.x},\n  url = {https://onlinelibrary.wiley.com/doi/abs/10.1111/j.2153-3490.1962.tb00128.x},\n  eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1111/j.2153-3490.1962.tb00128.x},\n  year = {1962}\n  }\n\nBrunt-Vaisala frequency N² defined as in equation (1b) in\n  Durran, D.R. and J.B. Klemp, 1982:\n  On the Effects of Moisture on the Brunt-Väisälä Frequency.\n  J. Atmos. Sci., 39, 2152–2158,\n  https://doi.org/10.1175/1520-0469(1982)039<2152:OTEOMO>2.0.CO;2","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"Fields","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"$(DocStringExtensions.FIELDS)\n\"\"\"\nstruct SmagorinskyLilly{FT} <: TurbulenceClosure\n    \"Smagorinsky Coefficient [dimensionless]\"\n    C_smag::FT\nend\n\nvars_aux(::SmagorinskyLilly, FT) = @vars(Δ::FT)\nvars_gradient(::SmagorinskyLilly, FT) = @vars(θ_v::FT)\nvars_diffusive(::SmagorinskyLilly, FT) =\n    @vars(S::SHermitianCompact{3, FT, 6}, N²::FT)\n\n\nfunction atmos_init_aux!(\n    ::SmagorinskyLilly,\n    ::AtmosModel,\n    aux::Vars,\n    geom::LocalGeometry,\n)\n    aux.turbulence.Δ = lengthscale(geom)\nend\n\nfunction gradvariables!(\n    m::SmagorinskyLilly,\n    transform::Vars,\n    state::Vars,\n    aux::Vars,\n    t::Real,\n)\n    transform.turbulence.θ_v = aux.moisture.θ_v\nend\n\nfunction diffusive!(\n    ::SmagorinskyLilly,\n    orientation::Orientation,\n    diffusive::Vars,\n    ∇transform::Grad,\n    state::Vars,\n    aux::Vars,\n    t::Real,\n)\n\n    diffusive.turbulence.S = symmetrize(∇transform.u)\n    ∇Φ = ∇gravitational_potential(orientation, aux)\n    diffusive.turbulence.N² =\n        dot(∇transform.turbulence.θ_v, ∇Φ) / aux.moisture.θ_v\nend\n\nfunction turbulence_tensors(\n    m::SmagorinskyLilly,\n    state::Vars,\n    diffusive::Vars,\n    aux::Vars,\n    t::Real,\n)\n\n    FT = eltype(state)\n    S = diffusive.turbulence.S\n    normS = strain_rate_magnitude(S)\n    k̂ = aux.orientation.∇Φ / grav","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"squared buoyancy correction","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"    Richardson = diffusive.turbulence.N² / (normS^2 + eps(normS))\n    f_b² = sqrt(clamp(FT(1) - Richardson * inv_Pr_turb, FT(0), FT(1)))\n    ν₀ = normS * (m.C_smag * aux.turbulence.Δ)^2 + FT(1e-5)\n    ν = SVector{3, FT}(ν₀, ν₀, ν₀)\n    ν_v = k̂ .* dot(ν, f_b² * k̂)\n    ν_h = ν₀ .- ν_v\n    ν = ν_h + ν_v\n    τ = -2 * SDiagonal(ν) * S\n    D_t = (ν isa Real ? ν : diag(ν)) * inv_Pr_turb\n    return ν, D_t, τ\nend","category":"page"},{"location":"Atmos/Model/turbulence/#vreman-1","page":"-","title":"Vreman Model","text":"","category":"section"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"Vreman's turbulence model for anisotropic flows, which provides a less dissipative solution (specifically in the near-wall and transitional regions) than the Smagorinsky-Lilly method. This model relies of first derivatives of the velocity vector (i.e., the gradient tensor). By design, the Vreman model handles transitional as well as fully turbulent flows adequately. The input parameter to this model is the Smagorinsky coefficient - the coefficient is modified within the model functions to account for differences in model construction.","category":"page"},{"location":"Atmos/Model/turbulence/#Equations-1","page":"-","title":"Equations","text":"","category":"section"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"nu = 25 mathrmC_smag sqrtfracmathrmB_betaalpha_ialpha_j","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"where mathrmB_beta and alpha are functions of the velocity gradient tensor terms.","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"\"\"\"\n    Vreman{FT} <: TurbulenceClosure\n\n  §1.3.2 in CLIMA documentation\nFilter width Δ is the local grid resolution calculated from the mesh metric tensor. A Smagorinsky coefficient\nis specified and used to compute the equivalent Vreman coefficient.\n\n1) ν_e = √(Bᵦ/(αᵢⱼαᵢⱼ)) where αᵢⱼ = ∂uⱼ∂uᵢ with uᵢ the resolved scale velocity component.\n2) βij = Δ²αₘᵢαₘⱼ\n3) Bᵦ = β₁₁β₂₂ + β₂₂β₃₃ + β₁₁β₃₃ - β₁₂² - β₁₃² - β₂₃²\nβᵢⱼ is symmetric, positive-definite.\nIf Δᵢ = Δ, then β = Δ²αᵀα\n\n@article{Vreman2004,\n  title={An eddy-viscosity subgrid-scale model for turbulent shear flow: Algebraic theory and applications},\n  author={Vreman, AW},\n  journal={Physics of fluids},\n  volume={16},\n  number={10},\n  pages={3670--3681},\n  year={2004},\n  publisher={AIP}\n}","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"Fields","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"$(DocStringExtensions.FIELDS)\n\"\"\"\nstruct Vreman{FT} <: TurbulenceClosure\n    \"Smagorinsky Coefficient [dimensionless]\"\n    C_smag::FT\nend\nvars_aux(::Vreman, FT) = @vars(Δ::FT)\nvars_gradient(::Vreman, FT) = @vars(θ_v::FT)\nvars_diffusive(::Vreman, FT) = @vars(∇u::SMatrix{3, 3, FT, 9}, N²::FT)\n\nfunction atmos_init_aux!(::Vreman, ::AtmosModel, aux::Vars, geom::LocalGeometry)\n    aux.turbulence.Δ = lengthscale(geom)\nend\nfunction gradvariables!(\n    m::Vreman,\n    transform::Vars,\n    state::Vars,\n    aux::Vars,\n    t::Real,\n)\n    transform.turbulence.θ_v = aux.moisture.θ_v\nend\nfunction diffusive!(\n    ::Vreman,\n    orientation::Orientation,\n    diffusive::Vars,\n    ∇transform::Grad,\n    state::Vars,\n    aux::Vars,\n    t::Real,\n)\n    diffusive.turbulence.∇u = ∇transform.u\n    ∇Φ = ∇gravitational_potential(orientation, aux)\n    diffusive.turbulence.N² =\n        dot(∇transform.turbulence.θ_v, ∇Φ) / aux.moisture.θ_v\nend\n\nfunction turbulence_tensors(\n    m::Vreman,\n    state::Vars,\n    diffusive::Vars,\n    aux::Vars,\n    t::Real,\n)\n    FT = eltype(state)\n    α = diffusive.turbulence.∇u\n    S = symmetrize(α)\n    k̂ = aux.orientation.∇Φ / grav\n\n    normS = strain_rate_magnitude(S)\n    Richardson = diffusive.turbulence.N² / (normS^2 + eps(normS))\n    f_b² = sqrt(clamp(1 - Richardson * inv_Pr_turb, 0, 1))\n\n    β = f_b² * (aux.turbulence.Δ)^2 * (α' * α)\n    Bβ = principal_invariants(β)[2]\n\n    ν₀ = m.C_smag^2 * FT(2.5) * sqrt(abs(Bβ / (norm2(α) + eps(FT))))\n\n    ν₀ = SVector{3, FT}(ν₀, ν₀, ν₀)\n    ν_h = cross(k̂, cross(ν₀, k̂))\n    ν_v = k̂ .* dot(ν₀, f_b² * k̂)\n    ν = ν_h + ν_v\n    τ = -2 * SDiagonal(ν) * S\n    D_t = (ν isa Real ? ν : diag(ν)) * inv_Pr_turb\n    return ν, D_t, τ\nend","category":"page"},{"location":"Atmos/Model/turbulence/#aniso-min-diss-1","page":"-","title":"Anisotropic Minimum Dissipation","text":"","category":"section"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"This method is based Vreugdenhil and Taylor's minimum-dissipation eddy-viscosity model. The principles of the Rayleigh quotient minimizer are applied to the energy dissipation terms in the conservation equations, resulting in a maximum dissipation bound, and a model for eddy viscosity and eddy diffusivity.","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"nu_e = (mathrmCdelta)^2  mathrmmaxleft0 - frachatpartial_k hatu_i hatpartial_k hatu_j mathrmhatS_ijhatpartial_p hatu_q right","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"\"\"\"\n    AnisoMinDiss{FT} <: TurbulenceClosure\n\n  §1.3.2 in CLIMA documentation\nFilter width Δ is the local grid resolution calculated from the mesh metric tensor. A Poincare coefficient\nis specified and used to compute the equivalent AnisoMinDiss coefficient (computed as the solution to the\neigenvalue problem for the Laplacian operator).\n\n@article{\ndoi:10.1063/1.5037039,\nauthor = {Vreugdenhil,Catherine A.  and Taylor,John R. },\ntitle = {Large-eddy simulations of stratified plane Couette flow using the anisotropic minimum-dissipation model},\njournal = {Physics of Fluids},\nvolume = {30},\nnumber = {8},\npages = {085104},\nyear = {2018},\ndoi = {10.1063/1.5037039},\nURL = {\n        https://doi.org/10.1063/1.5037039\n},\n}\n\nFields\n$(DocStringExtensions.FIELDS)\n\"\"\"\nstruct AnisoMinDiss{FT} <: TurbulenceClosure\n    C_poincare::FT\nend\nvars_aux(::AnisoMinDiss, FT) = @vars(Δ::FT)\nvars_gradient(::AnisoMinDiss, FT) = @vars(θ_v::FT)\nvars_diffusive(::AnisoMinDiss, FT) =\n    @vars(∇u::SMatrix{3, 3, FT, 9}, ∇h_tot::SVector{3, FT}, N²::FT)\nfunction atmos_init_aux!(\n    ::AnisoMinDiss,\n    ::AtmosModel,\n    aux::Vars,\n    geom::LocalGeometry,\n)\n    aux.turbulence.Δ = lengthscale(geom)\nend\nfunction gradvariables!(\n    m::AnisoMinDiss,\n    transform::Vars,\n    state::Vars,\n    aux::Vars,\n    t::Real,\n)\n    transform.turbulence.θ_v = aux.moisture.θ_v\nend\nfunction diffusive!(\n    ::AnisoMinDiss,\n    orientation::Orientation,\n    diffusive::Vars,\n    ∇transform::Grad,\n    state::Vars,\n    aux::Vars,\n    t::Real,\n)\n    ∇Φ = ∇gravitational_potential(orientation, aux)\n    diffusive.turbulence.∇u = ∇transform.u\n    diffusive.turbulence.∇h_tot = ∇transform.h_tot\n    diffusive.turbulence.N² =\n        dot(∇transform.turbulence.θ_v, ∇Φ) / aux.moisture.θ_v\nend\nfunction turbulence_tensors(\n    m::AnisoMinDiss,\n    state::Vars,\n    diffusive::Vars,\n    aux::Vars,\n    t::Real,\n)\n    FT = eltype(state)\n    k̂ = aux.orientation.∇Φ / grav\n\n    ∇u = diffusive.turbulence.∇u\n    S = symmetrize(∇u)\n    normS = strain_rate_magnitude(S)\n\n    δ = aux.turbulence.Δ\n    Richardson = diffusive.turbulence.N² / (normS^2 + eps(normS))\n    f_b² = sqrt(clamp(1 - Richardson * inv_Pr_turb, 0, 1))\n\n    δ_vec = SVector(δ, δ, δ)\n    δ_m = δ_vec ./ transpose(δ_vec)\n    ∇û = ∇u .* δ_m\n    Ŝ = symmetrize(∇û)\n    ν₀ =\n        (m.C_poincare .* δ_vec) .^ 2 * max(\n            FT(1e-5),\n            -dot(transpose(∇û) * (∇û), Ŝ) / (dot(∇û, ∇û) .+ eps(normS)),\n        )\n    ν_h = cross(k̂, cross(ν₀, k̂))\n    ν_v = k̂ .* dot(ν₀, f_b² * k̂)\n    ν = ν_h + ν_v\n    τ = -2 * SDiagonal(ν) * S\n    D_t = (ν isa Real ? ν : diag(ν)) * inv_Pr_turb\n    return ν, D_t, τ\nend","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"","category":"page"},{"location":"Atmos/Model/turbulence/#","page":"-","title":"-","text":"This page was generated using Literate.jl.","category":"page"},{"location":"LinearSolvers/#LinearSolvers-1","page":"LinearSolvers","title":"LinearSolvers","text":"","category":"section"},{"location":"LinearSolvers/#","page":"LinearSolvers","title":"LinearSolvers","text":"CurrentModule = CLIMA","category":"page"},{"location":"LinearSolvers/#GeneralizedConjugateResidual-1","page":"LinearSolvers","title":"GeneralizedConjugateResidual","text":"","category":"section"},{"location":"LinearSolvers/#","page":"LinearSolvers","title":"LinearSolvers","text":"GeneralizedConjugateResidualSolver.GeneralizedConjugateResidual","category":"page"},{"location":"LinearSolvers/#CLIMA.GeneralizedConjugateResidualSolver.GeneralizedConjugateResidual","page":"LinearSolvers","title":"CLIMA.GeneralizedConjugateResidualSolver.GeneralizedConjugateResidual","text":"GeneralizedConjugateResidual(K, Q; rtol, atol)\n\nThis is an object for solving linear systems using an iterative Krylov method. The constructor parameter K is the number of steps after which the algorithm is restarted (if it has not converged), Q is a reference state used only to allocate the solver internal state, and tolerance specifies the convergence criterion based on the relative residual norm. The amount of memory required by the solver state is roughly (2K + 2) * size(Q). This object is intended to be passed to the linearsolve! command.\n\nThis uses the restarted Generalized Conjugate Residual method of Eisenstat (1983).\n\nReferences\n\n@article{eisenstat1983variational,\n  title={Variational iterative methods for nonsymmetric systems of linear equations},\n  author={Eisenstat, Stanley C and Elman, Howard C and Schultz, Martin H},\n  journal={SIAM Journal on Numerical Analysis},\n  volume={20},\n  number={2},\n  pages={345--357},\n  year={1983},\n  publisher={SIAM}\n}\n\n\n\n\n\n","category":"type"},{"location":"LinearSolvers/#GeneralizedMinimalResidual-1","page":"LinearSolvers","title":"GeneralizedMinimalResidual","text":"","category":"section"},{"location":"LinearSolvers/#","page":"LinearSolvers","title":"LinearSolvers","text":"GeneralizedMinimalResidualSolver.GeneralizedMinimalResidual","category":"page"},{"location":"LinearSolvers/#CLIMA.GeneralizedMinimalResidualSolver.GeneralizedMinimalResidual","page":"LinearSolvers","title":"CLIMA.GeneralizedMinimalResidualSolver.GeneralizedMinimalResidual","text":"GeneralizedMinimalResidual(Q; M, rtol, atol)\n\nThis is an object for solving linear systems using an iterative Krylov method. The constructor parameter M is the number of steps after which the algorithm is restarted (if it has not converged), Q is a reference state used only to allocate the solver internal state, and rtol specifies the convergence criterion based on the relative residual norm. The amount of memory required for the solver state is roughly (M + 1) * size(Q). This object is intended to be passed to the linearsolve! command.\n\nThis uses the restarted Generalized Minimal Residual method of Saad and Schultz (1986).\n\nReferences\n\n@article{saad1986gmres,\n  title={GMRES: A generalized minimal residual algorithm for solving nonsymmetric linear systems},\n  author={Saad, Youcef and Schultz, Martin H},\n  journal={SIAM Journal on scientific and statistical computing},\n  volume={7},\n  number={3},\n  pages={856--869},\n  year={1986},\n  publisher={SIAM}\n}\n\n\n\n\n\n","category":"type"},{"location":"LinearSolvers/#LinearSolvers-2","page":"LinearSolvers","title":"LinearSolvers","text":"","category":"section"},{"location":"LinearSolvers/#","page":"LinearSolvers","title":"LinearSolvers","text":"LinearSolvers.AbstractLinearSolver\nLinearSolvers.AbstractIterativeLinearSolver\nLinearSolvers.linearsolve!\nLinearSolvers.settolerance!","category":"page"},{"location":"LinearSolvers/#CLIMA.LinearSolvers.AbstractLinearSolver","page":"LinearSolvers","title":"CLIMA.LinearSolvers.AbstractLinearSolver","text":"AbstractLinearSolver\n\nThis is an abstract type representing a generic linear solver.\n\n\n\n\n\n","category":"type"},{"location":"LinearSolvers/#CLIMA.LinearSolvers.AbstractIterativeLinearSolver","page":"LinearSolvers","title":"CLIMA.LinearSolvers.AbstractIterativeLinearSolver","text":"AbstractIterativeLinearSolver\n\nThis is an abstract type representing a generic iterative linear solver.\n\nThe available concrete implementations are:\n\nGeneralizedConjugateResidual\nGeneralizedMinimalResidual\n\n\n\n\n\n","category":"type"},{"location":"LinearSolvers/#CLIMA.LinearSolvers.linearsolve!","page":"LinearSolvers","title":"CLIMA.LinearSolvers.linearsolve!","text":"linearsolve!(linearoperator!, solver::AbstractIterativeLinearSolver, Q, Qrhs, args...)\n\nSolves a linear problem defined by the linearoperator! function and the state Qrhs, i.e,\n\nL(Q) = Q_rhs\n\nusing the solver and the initial guess Q. After the call Q contains the solution.  The arguments args is passed to linearoperator! when it is called.\n\n\n\n\n\n","category":"function"},{"location":"LinearSolvers/#CLIMA.LinearSolvers.settolerance!","page":"LinearSolvers","title":"CLIMA.LinearSolvers.settolerance!","text":"settolerance!(solver::AbstractIterativeLinearSolver, tolerance, relative)\n\nSets the relative or absolute tolerance of the iterative linear solver solver to tolerance.\n\n\n\n\n\n","category":"function"},{"location":"Atmos/Microphysics/#Microphysics-Module-1","page":"Microphysics","title":"Microphysics Module","text":"","category":"section"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"The Microphysics module describes warm rain bulk parameterization of cloud microphysical processes. The module describes the warm rain (no ice and snow) formation and is based on the ideas of Kessler 1995.","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"Parameterized processes include:","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"rain sedimentation with mass weighted average terminal velocity,\ncondensation/evaporation of cloud water,\nautoconversion,\naccretion,\nevaporation of rain water.","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"The cloud microphysics variables are expressed as specific humidities:","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"q_tot - total water specific humidity,\nq_vap - water vapor specific humidity,\nq_liq - liquid water specific humidity,\nq_rai - rain water specific humidity.","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"Parameters used in the parameterization are defined in MicrophysicsParameters module. They consist of:","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"symbol definition units default value\nn_0_MP rain drop size distribution parameter frac1m^4 16 cdot 10^6\ntau_cond_evap cloud water condensation/evaporation timescale s 10\ntau_acnv cloud to rain water autoconversion timescale s 10^3\nq_liq_threshold cloud to rain water autoconversion threshold - 5 cdot 10^-4\nE_col collision efficiency between rain drops and cloud droplets - 08\nC_drag rain drop drag coefficient - 055\na_vent b_vent rain drop ventilation factor coefficients - 15 , 053\nK_therm thermal conductivity of air fracJm  s  K 24 cdot 10^-2\nnu_air kinematic viscosity of air fracm^2s 16 cdot 10^-5\nD_vapor diffusivity of water vapor fracm^2s 226 cdot 10^-5","category":"page"},{"location":"Atmos/Microphysics/#Rain-drop-size-distribution-1","page":"Microphysics","title":"Rain drop size distribution","text":"","category":"section"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"The rain-drop size distribution is assumed to follow Marshall-Palmer distribution (Marshall Palmer 1948 eq. 1):","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"beginequation\nn(r) = n_0_MP expleft(- lambda_MP  r right)\nendequation","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"where:","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"r is the drop radius,\nn_0_MP and lambda_MP are the Marshall-Palmer distribution parameters (twice the values used in the Marshall Palmer 1948, because we use drop radius and not diameter).","category":"page"},{"location":"Atmos/Microphysics/#Terminal-velocity-1","page":"Microphysics","title":"Terminal velocity","text":"","category":"section"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"The terminal velocity of an individual rain drop is defined by the balance between the gravitational acceleration (taking into account the density difference between water and air) and the drag force:","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"beginequation\nv_drop = left(frac83  C_drag left( fracrho_waterrho -1 right) right)^12 (g  r)^12 = v_c(rho)  (g  r)^12\nlabeleqvdrop\nendequation","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"where:","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"g is the gravitational acceleration,\nC_drag is the drag coefficient,\nrho_water is the density of water,\nrho is the density of air.","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"The mass weighted terminal velocity v_t is defined following Ogura and Takahashi 1971","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"beginequation\nv_t = fracF_rainRWC\nlabeleqvt\nendequation","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"where:","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"F_rain = int_0^infty n(r)  m(r)  v_drop(r)  dr is the vertical flux of rain drops,\nRWC = int_0^infty n(r)  m(r)  dr = rho  q_rai is the rain water content.","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"Integrating over the assumed Marshall-Palmer distribution results in","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"beginequation\nRWC = frac8 pi  n_0_MP  rho_waterlambda_MP^4\nlabeleqlambda\nendequation","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"beginequation\nF_rain = Gamma left(frac92 right) frac43 n_0_MP  pi  rho_water v_c(rho)  g^12 (lambda_MP)^-92\nlabeleqfrain\nendequation","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"Substituting eq.(\\ref{eq:lambda}) and eq.(\\ref{eq:frain}) into eq.(\\ref{eq:vt}) results in:","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"beginequation\nv_t = Gamma left( frac92 right)  fracv_c(rho)6  left( fracglambda_MPright)^12\nendequation","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"where lambda_MP is computed as","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"lambda_MP = left( frac8 pi rho_water n_0_MPrho q_rai right)^14","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"The default value of C_drag is chosen such that the v_t is close to the empirical terminal velocity formulation in Smolarkiewicz and Grabowski 1996. Assuming a constant drag coefficient is an approximation as it should be size and flow dependent, see drag_coefficient.","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"using CLIMA.Microphysics\nusing Plots\n\n# eq. 5d in Smolarkiewicz and Grabowski 1996\n# https://doi.org/10.1175/1520-0493(1996)124<0487:TTLSLM>2.0.CO;2\nfunction terminal_velocity_empirical(q_rai::DT, q_tot::DT, ρ::DT, ρ_air_ground::DT) where {DT<:Real}\n    rr  = q_rai / (DT(1) - q_tot)\n    vel = DT(14.34) * ρ_air_ground^DT(0.5) * ρ^-DT(0.3654) * rr^DT(0.1346)\n    return vel\nend\n\nq_rain_range = range(1e-8, stop=5e-3, length=100)\nρ_air, q_tot, ρ_air_ground = 1.2, 20 * 1e-3, 1.22\n\nplot(q_rain_range * 1e3,  [terminal_velocity(q_rai, ρ_air) for q_rai in q_rain_range], xlabel=\"q_rain [g/kg]\", ylabel=\"velocity [m/s]\", title=\"Average terminal velocity of rain\", label=\"CLIMA\")\nplot!(q_rain_range * 1e3, [terminal_velocity_empirical(q_rai, q_tot, ρ_air, ρ_air_ground) for q_rai in q_rain_range], label=\"Empirical\")\nsavefig(\"rain_terminal_velocity.svg\") # hide\nnothing # hide","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"(Image: )","category":"page"},{"location":"Atmos/Microphysics/#Cloud-condensation/evaporation-1","page":"Microphysics","title":"Cloud condensation/evaporation","text":"","category":"section"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"Condensation and evaporation of cloud water is parameterized as a relaxation to equilibrium value at the current time step.","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"beginequation\n  left fracd  q_liqdt right_cond evap = fracq^eq_liq - q_liqtau_cond_evap\nendequation","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"where:","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"q^eq_liq - liquid water specific humidity in equilibrium,\nq_liq - liquid water specific humidity,\ntau_cond_evap - relaxation timescale (parameter in MicrophysicsParameters module).","category":"page"},{"location":"Atmos/Microphysics/#Autoconversion-1","page":"Microphysics","title":"Autoconversion","text":"","category":"section"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"Autoconversion defines the rate of conversion form cloud to rain water due to collisions between cloud droplets. It is parameterized following Kessler 1995:","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"beginequation\n  left fracd  q_raidt right_acnv = fracmax(0 q_liq - q_liq_threshold)tau_acnv\nendequation","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"where:","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"q_liq - liquid water specific humidity,\ntau_acnv - timescale (parameter in MicrophysicsParameters module),\nq_liq_threshold - autoconversion (parameter in MicrophysicsParameters module).","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"The default values of tau_acnv and q_liq_threshold are based on Smolarkiewicz and Grabowski 1996.","category":"page"},{"location":"Atmos/Microphysics/#Accretion-1","page":"Microphysics","title":"Accretion","text":"","category":"section"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"Accretion defines the rate of conversion from cloud to rain water resulting from collisions between cloud droplets and rain drops. It is parameterized following Kessler 1995:","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"beginequation\nleft fracd  q_raidt right_accr = int_0^infty n(r)  pi r^2  v_drop E_col q_liq dr\nendequation","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"where:","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"E_col is the collision efficiency,\nv_drop is defined in eq.(\\ref{eq:vdrop}).","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"Integrating over the distribution and using the RWC to eliminate the lambda_MP results in:","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"beginequation\nleft fracd  q_raidt right_accr  = Gamma left(frac72 right) pi^18 8^-78 E_col v_c(rho)  left(fracrhorho_waterright)^78 n_0_MP^18 g^12 q_liq q_rai^78 = A(rho)  n_0_MP^18 g^12 q_liq q_rai^78\nendequation","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"The default value of collision efficiency E_coll is set to 0.8 so that the resulting accretion rate is close to the empirical accretion rate in Smolarkiewicz and Grabowski 1996. Assuming a constant E_col is an approximation, see for example collision efficiency.","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"using CLIMA.Microphysics\nusing Plots\n\n# eq. 5b in Smolarkiewicz and Grabowski 1996\n# https://doi.org/10.1175/1520-0493(1996)124<0487:TTLSLM>2.0.CO;2\nfunction accretion_empirical(q_rai::DT, q_liq::DT, q_tot::DT) where {DT<:Real}\n    rr  = q_rai / (DT(1) - q_tot)\n    rl  = q_liq / (DT(1) - q_tot)\n    return DT(2.2) * rl * rr^DT(7/8)\nend\n\n# some example values\nq_rain_range = range(1e-8, stop=5e-3, length=100)\nρ_air, q_liq, q_tot = 1.2, 5e-4, 20e-3\n\nplot(q_rain_range * 1e3,  [conv_q_liq_to_q_rai_accr(q_liq, q_rai, ρ_air) for q_rai in q_rain_range], xlabel=\"q_rain [g/kg]\", ylabel=\"accretion rate [1/s]\", title=\"Accretion\", label=\"CLIMA\")\nplot!(q_rain_range * 1e3, [accretion_empirical(q_rai, q_liq, q_tot) for q_rai in q_rain_range], label=\"empirical\")\nsavefig(\"accretion_rate.svg\") # hide\nnothing # hide","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"(Image: )","category":"page"},{"location":"Atmos/Microphysics/#Rain-evaporation-1","page":"Microphysics","title":"Rain evaporation","text":"","category":"section"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"Based on Maxwell 1971 the equation of growth of individual water drop is:","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"beginequation\n\nr fracdrdt = frac1rho_water\n                  left(fracq_vapq_vap^sat - 1 right)\n                  left(\n                    fracLKT left(fracLR_v T - 1 right) +\n                    fracR_v Tp_vap^sat D\n                  right)^-1\n                = frac1rho_water S(q_vap q_vap^sat)  G(T)\nendequation","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"where:","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"q_vap^sat is the saturation vapor specific humidity,\nL is the latent heat of vaporization,\nK_thermo is the thermal conductivity of air,\nR_v is the gas constant of water vapor,\nD_vapor is the diffusivity of water vapor,\nS(q_vap q_vap^sat) = fracq_vapq_vap^sat - 1 is commonly labeled as supersaturation,\nG(T) = left(fracLKT left(fracLR_v T - 1 right) + fracR_v Tp_vap^sat D right)^-1 combines the effects of thermal conductivity and water diffusivity.","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"The rate of q_rai evaporation is:","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"beginequation\nleft fracd  q_raidt right_evap  =  int_0^infty frac1rho  4 pi  r  S(q_vap q_vap^sat)  G(T)  F(r)  n(r)  dr\nendequation","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"where:","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"F(r) is the rain drop ventilation factor.","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"Following Seifert and Beheng 2006 eq. 24 the ventilation factor is defined as:","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"beginequation\nF(r) = a_vent + b_vent  N_Sc^13 N_Re(r)^12\nendequation","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"where:","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"a_vent, b_vent are coefficients,\nN_Sc is the Schmidt number,\nN_Re is the Reynolds number of a falling rain drop.","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"The Schmidt number is assumed constant:","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"N_Sc = fracnu_airD_vapor","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"where:","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"nu_air is the kinematic viscosity of air.","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"The Reynolds number of a rain drop is defined as:","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"N_Re = frac2  r  v_drop(r rho)nu_air = frac2 v_c(rho)  g^12  r^32nu_air","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"The final integral is:","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"beginequation\nleft fracd  q_raidt right_evap  =  4 pi S(q_vap q_vap^sat) fracn_0_MP G(T)rho\n                                                  int_0^infty left( a_vent r + b_vent N_Sc^13 (2 v_c(rho))^12 fracg^14nu_air^12 r^74 right) exp(-lambda_MP r) dr\nendequation","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"Integrating and eliminating lambda_MP using eq.(\\ref{eq:lambda}) results in:","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"beginequation\nleft fracd  q_raidt right_evap  = S(q_vap q_vap^sat) fracG(T) n_0_MP^12rho left( A q_rai^12 + B fracg^14n_0_MP^316 nu_air^12 q_rai^1116 right)\nendequation","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"where:","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"A = (2 pi)^12 a_vent left( fracrhorho_water right)^12\nB = Gammaleft(frac114right) 2^716 pi^516 b_vent N_Sc^13 v_c(rho)^12 left( fracrhorho_water right)^1116","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"The values of a_vent and b_vent are chosen so that at q_tot = 15 gkg and T=288K the resulting rain evaporation rate is close to the empirical rain evaporation rate from Smolarkiewicz and Grabowski 1996.","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"using CLIMA.Microphysics\nusing CLIMA.MoistThermodynamics\n\nusing CLIMAParameters\nusing CLIMAParameters.Planet: R_d, planet_radius, grav, MSLP\nstruct EarthParameterSet <: AbstractEarthParameterSet end\nconst param_set = EarthParameterSet()\n\nusing Plots\n\n# eq. 5c in Smolarkiewicz and Grabowski 1996\n# https://doi.org/10.1175/1520-0493(1996)124<0487:TTLSLM>2.0.CO;2\nfunction rain_evap_empirical(q_rai::DT, q::PhasePartition, T::DT, p::DT, ρ::DT) where {DT<:Real}\n\n    q_sat  = q_vap_saturation(param_set, T, ρ, q)\n    q_vap  = q.tot - q.liq\n    rr     = q_rai / (DT(1) - q.tot)\n    rv_sat = q_sat / (DT(1) - q.tot)\n    S      = q_vap/q_sat - DT(1)\n\n    ag, bg = 5.4 * 1e2, 2.55 * 1e5\n    G = DT(1) / (ag + bg / p / rv_sat) / ρ\n\n    av, bv = 1.6, 124.9\n    F = av * (ρ/DT(1e3))^DT(0.525)  * rr^DT(0.525) + bv * (ρ/DT(1e3))^DT(0.7296) * rr^DT(0.7296)\n\n    return DT(1) / (DT(1) - q.tot) * S * F * G\nend\n\n# example values\nT, p = 273.15 + 15, 90000.\nϵ = 1. / molmass_ratio\np_sat = saturation_vapor_pressure(param_set, T, Liquid())\nq_sat = ϵ * p_sat / (p + p_sat * (ϵ - 1.))\nq_rain_range = range(1e-8, stop=5e-3, length=100)\nq_tot = 15e-3\nq_vap = 0.15 * q_sat\nq_ice = 0.\nq_liq = q_tot - q_vap - q_ice\nq = PhasePartition(q_tot, q_liq, q_ice)\nR = gas_constant_air(param_set, q)\nρ = p / R / T\n\nplot(q_rain_range * 1e3,  [conv_q_rai_to_q_vap(q_rai, q, T, p, ρ) for q_rai in q_rain_range], xlabel=\"q_rain [g/kg]\", ylabel=\"rain evaporation rate [1/s]\", title=\"Rain evaporation\", label=\"CLIMA\")\nplot!(q_rain_range * 1e3, [rain_evap_empirical(q_rai, q, T, p, ρ) for q_rai in q_rain_range], label=\"empirical\")\nsavefig(\"rain_evaporation_rate.svg\") # hide\nnothing # hide","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"(Image: )","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"CurrentModule = CLIMA.Microphysics","category":"page"},{"location":"Atmos/Microphysics/#Functions-1","page":"Microphysics","title":"Functions","text":"","category":"section"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"terminal_velocity\nconv_q_vap_to_q_liq\nconv_q_liq_to_q_rai_acnv\nconv_q_liq_to_q_rai_accr\nconv_q_rai_to_q_vap","category":"page"},{"location":"Atmos/Microphysics/#CLIMA.Microphysics.terminal_velocity","page":"Microphysics","title":"CLIMA.Microphysics.terminal_velocity","text":"terminal_velocity(q_rai, ρ)\n\nwhere:\n\nq_rai - rain water specific humidity\nρ     - density of air\n\nReturns the mass weighted average rain terminal velocity assuming Marshall Palmer 1948 distribution of rain drops.\n\n\n\n\n\n","category":"function"},{"location":"Atmos/Microphysics/#CLIMA.Microphysics.conv_q_vap_to_q_liq","page":"Microphysics","title":"CLIMA.Microphysics.conv_q_vap_to_q_liq","text":"conv_q_vap_to_q_liq(q_sat, q)\n\nwhere:\n\nq_sat - PhasePartition at equilibrium\nq     - current PhasePartition\n\nReturns the q_liq tendency due to condensation/evaporation. The tendency is obtained assuming a relaxation to equilibrium with constant timescale.\n\n\n\n\n\n","category":"function"},{"location":"Atmos/Microphysics/#CLIMA.Microphysics.conv_q_liq_to_q_rai_acnv","page":"Microphysics","title":"CLIMA.Microphysics.conv_q_liq_to_q_rai_acnv","text":"conv_q_liq_to_q_rai_acnv(q_liq)\n\nwhere:\n\nq_liq - is the liquid water specific humidity\n\nReturns the q_rai tendency due to collisions between cloud droplets (autoconversion) parametrized following Kessler 1995.\n\n\n\n\n\n","category":"function"},{"location":"Atmos/Microphysics/#CLIMA.Microphysics.conv_q_liq_to_q_rai_accr","page":"Microphysics","title":"CLIMA.Microphysics.conv_q_liq_to_q_rai_accr","text":"conv_q_liq_to_q_rai_accr(q_liq, q_rai, ρ)\n\nwhere:\n\nq_liq - is the liquid water specific humidity\nq_rai - is the rain water specific humidity\nρ - is the density of air\n\nReturns the q_rai tendency due to collisions between cloud droplets and rain drops (accretion) parametrized following Kessler 1995.\n\n\n\n\n\n","category":"function"},{"location":"Atmos/Microphysics/#CLIMA.Microphysics.conv_q_rai_to_q_vap","page":"Microphysics","title":"CLIMA.Microphysics.conv_q_rai_to_q_vap","text":"conv_q_rai_to_q_vap(q_rai, q, T, p, ρ)\n\nwhere:\n\nq_rai - rain water specific humidity\nq - current PhasePartition\nT - temperature\np - pressure\nρ - air density\n\nReturns the q_rai tendency due to rain evaporation. Parameterized following Smolarkiewicz and Grabowski 1996.\n\n\n\n\n\n","category":"function"},{"location":"Atmos/Microphysics/#References-1","page":"Microphysics","title":"References","text":"","category":"section"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"@article{GrabowskiandSmolarkiewicz_1996, author = {Grabowski, Wojciech W. and Smolarkiewicz, Piotr K.}, title = {Two-Time-Level Semi-Lagrangian Modeling of Precipitating Clouds}, journal = {Monthly Weather Review}, volume = {124}, number = {3}, pages = {487-497}, year = {1996}, doi = {10.1175/1520-0493(1996)124<0487:TTLSLM>2.0.CO;2}}","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"@article{Kessler_1995, author = {Kessler, E.}, title = {On the continuity and distribution of water substance in atmospheric circulations}, journal = {Atmospheric Research}, volume = {38}, number = {1}, pages = {109 - 145}, year = {1995}, doi = {10.1016/0169-8095(94)00090-Z}}","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"@book{Mason_1971, author = {Mason, B. J.}, title = {The Physics of Clouds}, publisher = {Oxford Univ. Press}, year = {1971}}","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"@article{MarshallandPalmer_1948, author = {Marshall, J. S. and Palmer, W. Mc K.}, title = {The distribution of raindrops with size}, journal = {Journal of Meteorology}, volume = {5}, number = {4}, pages = {165-166}, year = {1948}, doi = {10.1175/1520-0469(1948)005<0165:TDORWS>2.0.CO;2}}","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"@article{OguraandTakahashi_1971, author = {Oqura, Yoshimitsu and Takahashi, Tsutomu}, title = {Numerical simulation of the life cycle of a thunderstorm cell}, journal = {Monthly Weather Review}, volume = {99}, number = {12}, pages = {895-911}, year = {1971}, doi = {10.1175/1520-0493(1971)099<0895:NSOTLC>2.3.CO;2}}","category":"page"},{"location":"Atmos/Microphysics/#","page":"Microphysics","title":"Microphysics","text":"@article{SeifertandBeheng_2006, author={Seifert, A. and Beheng, K. D.}, title={A two-moment cloud microphysics parameterization for mixed-phase clouds. Part 1: Model description}, journal={Meteorology and Atmospheric Physics}, year={2006}, volume={92}, number={1}, pages={45–66}, doi={10.1007/s00703-005-0112-4}}","category":"page"},{"location":"DGmethods_old/#DGmethods_old-1","page":"DGmethods_old","title":"DGmethods_old","text":"","category":"section"},{"location":"DGmethods_old/#","page":"DGmethods_old","title":"DGmethods_old","text":"CurrentModule = CLIMA","category":"page"},{"location":"DGmethods_old/#SpaceMethods-1","page":"DGmethods_old","title":"SpaceMethods","text":"","category":"section"},{"location":"DGmethods_old/#","page":"DGmethods_old","title":"DGmethods_old","text":"Set of abstract types for spatial discretizations","category":"page"},{"location":"DGmethods_old/#Types-1","page":"DGmethods_old","title":"Types","text":"","category":"section"},{"location":"DGmethods_old/#","page":"DGmethods_old","title":"DGmethods_old","text":"SpaceMethods.AbstractSpaceMethod\nSpaceMethods.AbstractDGMethod","category":"page"},{"location":"DGmethods_old/#CLIMA.SpaceMethods.AbstractSpaceMethod","page":"DGmethods_old","title":"CLIMA.SpaceMethods.AbstractSpaceMethod","text":"AbstractSpaceMethod\n\nSupertype for spatial discretizations\n\n\n\n\n\n","category":"type"},{"location":"DGmethods_old/#CLIMA.SpaceMethods.AbstractDGMethod","page":"DGmethods_old","title":"CLIMA.SpaceMethods.AbstractDGMethod","text":"AbstractDGMethod <: AbstractSpaceMethod\n\nSupertype for discontinuous Galerkin spatial discretizations\n\n\n\n\n\n","category":"type"},{"location":"DGmethods_old/#DGBalanceLawDiscretizations-1","page":"DGmethods_old","title":"DGBalanceLawDiscretizations","text":"","category":"section"},{"location":"DGmethods_old/#","page":"DGmethods_old","title":"DGmethods_old","text":"DGBalanceLawDiscretizations","category":"page"},{"location":"DGmethods_old/#CLIMA.DGBalanceLawDiscretizations","page":"DGmethods_old","title":"CLIMA.DGBalanceLawDiscretizations","text":"DG Balance Law Discretizations module. Attempts to provide a reasonable implementation of a discontinuous Galerkin method (in weak form) on tensor product quadrilateral (2D) and hexahedral (3D) elements for balance laws of the form\n\nq_t + Σ_i=1d F_ii = s\n\nwhere q is the state vector, F is the flux function, and s is the source function. F includes both the \"inviscid\" and \"viscous\" fluxes. Note that this is a space only discretization, time must be advanced using some ordinary differential equations methods; see ODESolvers.\n\nThe flux function F_{i} is taken to be of the form:\n\nF_i = F_i(q σ a)\nσ = H(q G(q a) a)\n\nwhere a is a set of parameters and viscous terms enter through σ\n\nThe source term is of the form:\n\ns = s(q a)\n\nIn the code and docs the following terminology is used:\n\nq is referred to as the state\nσ is the viscous state\na is the auxiliary state\nF is the physical flux\nH is the viscous transform\nG is the gradient transform\n\nMuch of the notation used in this module follows Hesthaven and Warburton (2008).\n\nnote: Note\nCurrently all the functions take the same parameters and the gradient transform can take a user-specified subset of the state vector.\n\nreferences: References\n@BOOK{HesthavenWarburton2008,\n  title = {Nodal Discontinuous {G}alerkin Methods: {A}lgorithms, Analysis,\n           and Applications},\n  publisher = {Springer-Verlag New York},\n  year = {2008},\n  author = {Hesthaven, Jan S. and Warburton, Tim},\n  volume = {54},\n  series = {Texts in Applied Mathematics},\n  doi = {10.1007/978-0-387-72067-8}\n}\n\n\n\n\n\n","category":"module"},{"location":"DGmethods_old/#Types/Constructors-1","page":"DGmethods_old","title":"Types/Constructors","text":"","category":"section"},{"location":"DGmethods_old/#","page":"DGmethods_old","title":"DGmethods_old","text":"DGBalanceLawDiscretizations.DGBalanceLaw","category":"page"},{"location":"DGmethods_old/#CLIMA.DGBalanceLawDiscretizations.DGBalanceLaw","page":"DGmethods_old","title":"CLIMA.DGBalanceLawDiscretizations.DGBalanceLaw","text":"DGBalanceLaw <: AbstractDGMethod\n\nThis contains the necessary information for a discontinuous Galerkin method for balance laws.\n\nSee also: Outer constructor DGBalanceLaw\n\nFields\n\ngrid\ncomputational grid / mesh\nnstate\nnumber of state\nflux!\nphysical flux function\nnumerical_flux!\nnumerical flux function\nnumerical_boundary_flux!\nnumerical boundary flux function\nQvisc\nstorage for the viscous state\nnumber_gradient_states\nnumber of out states for gradient_transform!\nnumber_viscous_states\nnumber of out states for the viscous_transform!\ngradient_transform!\ntransform from state to variables to take gradient of\nviscous_transform!\ntransform from Q and gradient state to viscous states\nviscous_penalty!\npenalty for the viscous state computation\nviscous_boundary_penalty!\nboundary penalty for the viscous state computation (e.g., Dirichlet)\nauxstate\nauxiliary state array\nsource!\nsource function\npreodefun!\ncallback function for before the odefun!\n\n\n\n\n\n","category":"type"},{"location":"DGmethods_old/#Functions-1","page":"DGmethods_old","title":"Functions","text":"","category":"section"},{"location":"DGmethods_old/#","page":"DGmethods_old","title":"DGmethods_old","text":"DGBalanceLawDiscretizations.grad_auxiliary_state!\nDGBalanceLawDiscretizations.indefinite_stack_integral!\nDGBalanceLawDiscretizations.reverse_indefinite_stack_integral!\nDGBalanceLawDiscretizations.dof_iteration!","category":"page"},{"location":"DGmethods_old/#CLIMA.DGBalanceLawDiscretizations.grad_auxiliary_state!","page":"DGmethods_old","title":"CLIMA.DGBalanceLawDiscretizations.grad_auxiliary_state!","text":"grad_auxiliary_state!(disc, i, (ix1, ix2, ix3)\n\nComputes the gradient of a the field i of the constant auxiliary state of disc and stores the x1, x2, x3 compoment in fields ix1, ix2, ix3 of constant auxiliary state.\n\nnote: Note\nThis only computes the element gradient not a DG gradient. If your constant auxiliary state is discontinuous this may or may not be what you want!\n\n\n\n\n\n","category":"function"},{"location":"DGmethods_old/#CLIMA.DGBalanceLawDiscretizations.indefinite_stack_integral!","page":"DGmethods_old","title":"CLIMA.DGBalanceLawDiscretizations.indefinite_stack_integral!","text":"indefinite_stack_integral!(disc, f, Q, out_states, [P=disc.auxstate])\n\nComputes an indefinite line integral along the trailing dimension (ξ3 in 3-D and ξ2 in 2-D) up an element stack using state Q\n\n_ζ_0^ζ f(q aux t)\n\nand stores the result of the integral in field of P indicated by out_states\n\nThe syntax of the integral kernel is:\n\nf(F, Q, aux)\n\nwhere F is an MVector of length length(out_states), Q and aux are the MVectors for the state and auxiliary state at a single degree of freedom. The function is responsible for filling F.\n\nRequires the isstacked(disc.grid.topology) == true\n\n\n\n\n\n","category":"function"},{"location":"DGmethods_old/#CLIMA.DGBalanceLawDiscretizations.reverse_indefinite_stack_integral!","page":"DGmethods_old","title":"CLIMA.DGBalanceLawDiscretizations.reverse_indefinite_stack_integral!","text":"reverse_indefinite_stack_integral!(disc, oustate, instate,\n                                   [P=disc.auxstate])\n\nreverse previously computed indefinite integral(s) computed with indefinite_stack_integral! to be\n\n_ζ^ζ_max f(q aux t)\n\nThe states instate[i] is reverse and stored in instate[i].\n\nRequires the isstacked(disc.grid.topology) == true\n\n\n\n\n\n","category":"function"},{"location":"DGmethods_old/#CLIMA.DGBalanceLawDiscretizations.dof_iteration!","page":"DGmethods_old","title":"CLIMA.DGBalanceLawDiscretizations.dof_iteration!","text":"dof_iteration!(dof_fun!::Function, R::MPIStateArray, disc::DGBalanceLaw,\n               Q::MPIStateArray)\n\nIterate over each dof to fill R using the dof_fun!. The syntax of the dof_fun! is\n\ndof_fun!(l_R, l_Q, l_Qvisc, l_aux)\n\nwhere l_R, l_Q, l_Qvisc, and l_aux are of type MArray filled initially with the values at a single degree of freedom. After the call the values in l_R will be written back to the degree of freedom of R.\n\n\n\n\n\n","category":"function"},{"location":"DGmethods_old/#Pirated-Type-Functions-1","page":"DGmethods_old","title":"Pirated Type Functions","text":"","category":"section"},{"location":"DGmethods_old/#","page":"DGmethods_old","title":"DGmethods_old","text":"CLIMA.MPIStateArrays.MPIStateArray(::DGBalanceLawDiscretizations.DGBalanceLaw)\nCLIMA.MPIStateArrays.MPIStateArray(::DGBalanceLawDiscretizations.DGBalanceLaw, ::Function)\nCLIMA.SpaceMethods.odefun!","category":"page"},{"location":"DGmethods_old/#CLIMA.MPIStateArrays.MPIStateArray-Tuple{CLIMA.DGBalanceLawDiscretizations.DGBalanceLaw}","page":"DGmethods_old","title":"CLIMA.MPIStateArrays.MPIStateArray","text":"MPIStateArray(disc::DGBalanceLaw; nstate=disc.nstate)\n\nGiven a discretization disc constructs an MPIStateArrays for holding a solution state. The optional 'nstate' arguments allows the user to specify a specific number of states.\n\n\n\n\n\n","category":"method"},{"location":"DGmethods_old/#CLIMA.MPIStateArrays.MPIStateArray-Tuple{CLIMA.DGBalanceLawDiscretizations.DGBalanceLaw,Function}","page":"DGmethods_old","title":"CLIMA.MPIStateArrays.MPIStateArray","text":"MPIStateArray(disc::DGBalanceLaw, initialization!::Function)\n\nGiven a discretization disc constructs an MPIStateArrays for holding a solution state.\n\nAfter allocation the MPIStateArray is initialized using the function initialization! which will be called as:\n\ninitialization!(Q, x1, x2, x3, aux)\n\nwhere Q is an MArray with the solution state at a single degree of freedom (DOF) to initialize and (x1, x2, x3) is the coordinate point for the allocation.  The auxiliary data the values at the DOF are passed through as an MArray through the aux argument; if disc does not have auxiliary data then the length of the MArray will be zero.\n\nnote: Note\nQ is undef at start the function (i.e., not initialized to zero)\n\nnote: Note\nModifications of the aux array will be discarded.\n\ntodo: Todo\nRemove host and device data transfers.\n\n\n\n\n\n","category":"method"},{"location":"DGmethods_old/#CLIMA.SpaceMethods.odefun!","page":"DGmethods_old","title":"CLIMA.SpaceMethods.odefun!","text":"odefun!(disc::AbstractSpaceMethod, dQ, Q, t; increment)\n\nEvaluates the right-hand side of the spatial discretization defined by disc at time t with state Q. The result is either added into dQ if increment is true or stored in dQ if it is false. Namely, the semi-discretization is of the form dotQ = F(Q t) and after the call dQ += F(Q, t) if increment == true or dQ = F(Q, t) if increment == false\n\nnote: Note\nThere is no generic implementation of this function. This must be implemented for each subtype of AbstractSpaceMethod\n\n\n\n\n\n","category":"function"},{"location":"DGmethods_old/#Kernels-1","page":"DGmethods_old","title":"Kernels","text":"","category":"section"},{"location":"DGmethods_old/#","page":"DGmethods_old","title":"DGmethods_old","text":"DGBalanceLawDiscretizations.volumerhs!\nDGBalanceLawDiscretizations.facerhs!\nDGBalanceLawDiscretizations.initauxstate!\nDGBalanceLawDiscretizations.elem_grad_field!\nDGBalanceLawDiscretizations.knl_dof_iteration!\nDGBalanceLawDiscretizations.knl_indefinite_stack_integral!","category":"page"},{"location":"DGmethods_old/#CLIMA.DGBalanceLawDiscretizations.volumerhs!","page":"DGmethods_old","title":"CLIMA.DGBalanceLawDiscretizations.volumerhs!","text":"volumerhs!(::Val{dim}, ::Val{N}, ::Val{nstate}, ::Val{nviscstate},\n           ::Val{nauxstate}, flux!, source!, rhs, Q, Qvisc, auxstate,\n           vgeo, t, D, elems) where {dim, N, nstate, nviscstate,\n\nComputational kernel: Evaluate the volume integrals on right-hand side of a DGBalanceLaw semi-discretization.\n\nSee odefun! for usage.\n\n\n\n\n\n","category":"function"},{"location":"DGmethods_old/#CLIMA.DGBalanceLawDiscretizations.facerhs!","page":"DGmethods_old","title":"CLIMA.DGBalanceLawDiscretizations.facerhs!","text":"facerhs!(::Val{dim}, ::Val{N}, ::Val{nstate}, ::Val{nviscstate},\n         ::Val{nauxstate}, numerical_flux!,\n         numerical_boundary_flux!, rhs, Q, Qvisc, auxstate,\n         vgeo, sgeo, t, vmap⁻, vmap⁺, elemtobndy,\n         elems) where {dim, N, nstate, nviscstate, nauxstate}\n\nComputational kernel: Evaluate the surface integrals on right-hand side of a DGBalanceLaw semi-discretization.\n\nSee odefun! for usage.\n\n\n\n\n\n","category":"function"},{"location":"DGmethods_old/#CLIMA.DGBalanceLawDiscretizations.initauxstate!","page":"DGmethods_old","title":"CLIMA.DGBalanceLawDiscretizations.initauxstate!","text":"initauxstate!(::Val{dim}, ::Val{N}, ::Val{nauxstate}, auxstatefun!,\n              auxstate, vgeo, elems) where {dim, N, nauxstate}\n\nComputational kernel: Initialize the auxiliary state\n\nSee DGBalanceLaw for usage.\n\n\n\n\n\n","category":"function"},{"location":"DGmethods_old/#CLIMA.DGBalanceLawDiscretizations.elem_grad_field!","page":"DGmethods_old","title":"CLIMA.DGBalanceLawDiscretizations.elem_grad_field!","text":"elem_grad_field!(::Val{dim}, ::Val{N}, ::Val{nstate}, Q, vgeo, D, elems, s,\n                 sx, sy, sz) where {dim, N, nstate}\n\nComputational kernel: Compute the element gradient of state s of Q and store it in sx, sy, and sz of Q.\n\nwarning: Warning\nThis does not compute a DG gradient, but only over the element. If Q_s is discontinuous you may want to consider another approach.\n\n\n\n\n\n","category":"function"},{"location":"DGmethods_old/#CLIMA.DGBalanceLawDiscretizations.knl_dof_iteration!","page":"DGmethods_old","title":"CLIMA.DGBalanceLawDiscretizations.knl_dof_iteration!","text":"knl_dof_iteration!(::Val{dim}, ::Val{N}, ::Val{nRstate}, ::Val{nstate},\n                   ::Val{nviscstate}, ::Val{nauxstate}, dof_fun!, R, Q,\n                   QV, auxstate, elems) where {dim, N, nRstate, nstate,\n                                               nviscstate, nauxstate}\n\nComputational kernel: fill postprocessing array\n\nSee DGBalanceLaw for usage.\n\n\n\n\n\n","category":"function"},{"location":"DGmethods_old/#CLIMA.DGBalanceLawDiscretizations.knl_indefinite_stack_integral!","page":"DGmethods_old","title":"CLIMA.DGBalanceLawDiscretizations.knl_indefinite_stack_integral!","text":"knl_indefinite_stack_integral!(::Val{dim}, ::Val{N}, ::Val{nstate},\n                                        ::Val{nauxstate}, ::Val{nvertelem},\n                                        int_knl!, Q, auxstate, vgeo, Imat,\n                                        elems, ::Val{outstate}\n                                       ) where {dim, N, nstate, nauxstate,\n                                                outstate, nvertelem}\n\nComputational kernel: compute indefinite integral along the vertical stack\n\nSee DGBalanceLaw for usage.\n\n\n\n\n\n","category":"function"},{"location":"DGmethods_old/#Numerical-Fluxes-1","page":"DGmethods_old","title":"Numerical Fluxes","text":"","category":"section"},{"location":"DGmethods_old/#","page":"DGmethods_old","title":"DGmethods_old","text":"DGBalanceLawDiscretizations.NumericalFluxes.rusanov!\nDGBalanceLawDiscretizations.NumericalFluxes.rusanov_boundary_flux!","category":"page"},{"location":"DGmethods_old/#CLIMA.DGBalanceLawDiscretizations.NumericalFluxes.rusanov!","page":"DGmethods_old","title":"CLIMA.DGBalanceLawDiscretizations.NumericalFluxes.rusanov!","text":"rusanov!(F::MArray, nM, QM, QVM, auxM, QP, QVP, auxP, t, flux!, wavespeed,\n         [computeQjump!])\n\nCalculate the Rusanov (aka local Lax-Friedrichs) numerical flux given the plus and minus side states/viscous states QP/QVP and QM/QVM using the physical flux function flux! and wavespeed calculation.\n\nThe flux! has almost the same calling convention as flux! from DGBalanceLaw.\n\nThe function wavespeed should return the maximum wavespeed for a state and is called as wavespeed(nM, QM, auxM, t) and wavespeed(nM, QP, auxP, t) where nM is the outward unit normal for the minus side.\n\nWhen present computeQjump!(ΔQ, QM, auxM, QP, auxP) will be called after so that the user specify the value to use for QM - QP; this is useful for correcting Q to include discontinuous reference states.\n\n\n\n\n\n","category":"function"},{"location":"DGmethods_old/#CLIMA.DGBalanceLawDiscretizations.NumericalFluxes.rusanov_boundary_flux!","page":"DGmethods_old","title":"CLIMA.DGBalanceLawDiscretizations.NumericalFluxes.rusanov_boundary_flux!","text":"rusanov_boundary_flux!(F::MArray{Tuple{nstate}}, nM, QM, QVM, auxM, QP, QVP,\n                       auxP, bctype, t, flux!, bcstate!, wavespeed,\n                       computeQjump! = nothing) where {nstate}\n\nThe function bcstate! is used to calculate the plus side state for the boundary condition bctype. The calling convention is:\n\nbcstate!(QP, QVP, auxP, nM, QM, QVM, auxM, bctype, t)\n\nwhere QP, QVP, and auxP are the plus side state, viscous state, and auxiliary state to be filled from the given data; other arguments should not be modified.\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#MoistThermodynamics-Module-1","page":"MoistThermodynamics","title":"MoistThermodynamics Module","text":"","category":"section"},{"location":"Common/MoistThermodynamics/#","page":"MoistThermodynamics","title":"MoistThermodynamics","text":"This is a test","category":"page"},{"location":"Common/MoistThermodynamics/#","page":"MoistThermodynamics","title":"MoistThermodynamics","text":"The MoistThermodynamics module provides all thermodynamic functions needed for the atmosphere and functions shared across model components. The functions are general for a moist atmosphere that includes suspended cloud condensate in the working fluid; the special case of a dry atmosphere is obtained for zero specific humidities (or simply by omitting the optional specific humidity arguments in the functions that are needed for a dry atmosphere). The general formulation assumes that there are tracers for the total water specific humidity q_tot, the liquid specific humidity q_liq, and the ice specific humidity q_ice to characterize the thermodynamic state and composition of moist air.","category":"page"},{"location":"Common/MoistThermodynamics/#","page":"MoistThermodynamics","title":"MoistThermodynamics","text":"There are several types of functions:","category":"page"},{"location":"Common/MoistThermodynamics/#","page":"MoistThermodynamics","title":"MoistThermodynamics","text":"Equation of state (ideal gas law):\nair_pressure\nSpecific gas constant and isobaric and isochoric specific heats of moist air:\ngas_constant_air\ncp_m\ncv_m\nSpecific latent heats of vaporization, fusion, and sublimation:\nlatent_heat_vapor\nlatent_heat_fusion\nlatent_heat_sublim\nSaturation vapor pressure and specific humidity over liquid and ice:\nsat_vapor_press_liquid\nsat_vapor_press_ice\nsat_shum\nFunctions computing energies and inverting them to obtain temperatures\ntotal_energy\ninternal_energy\nair_temperature\nFunctions to compute temperatures and partitioning of water into phases in thermodynamic equilibrium (when Gibbs' phase rule implies that the entire thermodynamic state of moist air, including the liquid and ice specific humidities, can be calculated from the 3 thermodynamic state variables, such as energy, pressure, and total specific humidity)\nliquid_fraction (fraction of condensate that is liquid)\nsaturation_adjustment (compute temperature from energy, density, and total specific humidity)\nAuxiliary functions for diagnostic purposes, e.g., other thermodynamic quantities\nliquid_ice_pottemp (liquid-ice potential temperature)","category":"page"},{"location":"Common/MoistThermodynamics/#","page":"MoistThermodynamics","title":"MoistThermodynamics","text":"A moist dynamical core that assumes equilibrium thermodynamics can be obtained from a dry dynamical core with total energy as a prognostic variable by including a tracer for the total specific humidity q_tot, using the functions, e.g., for the energies in the module, and computing the temperature T and the liquid and ice specific humidities (q.liq and q.ice) from the internal energy e_int by saturation adjustment:","category":"page"},{"location":"Common/MoistThermodynamics/#","page":"MoistThermodynamics","title":"MoistThermodynamics","text":"T = saturation_adjustment(e_int, ρ, q_tot);\nq = PhasePartition_equil(T, ρ, q_tot);","category":"page"},{"location":"Common/MoistThermodynamics/#","page":"MoistThermodynamics","title":"MoistThermodynamics","text":"here, ρ is the density of the moist air, and the internal energy e_int = e_tot - e_kin - geopotential is the total energy e_tot minus kinetic energy e_kin and potential energy geopotential (all energies per unit mass). No changes to the \"right-hand sides\" of the dynamical equations are needed for a moist dynamical core that supports clouds, as long as they do not precipitate. Additional source-sink terms arise from precipitation.","category":"page"},{"location":"Common/MoistThermodynamics/#","page":"MoistThermodynamics","title":"MoistThermodynamics","text":"Schematically, the workflow in such a core would look as follows:","category":"page"},{"location":"Common/MoistThermodynamics/#","page":"MoistThermodynamics","title":"MoistThermodynamics","text":"# initialize\ngeopotential = grav * z\nq_tot          = ...\nρ            = ...\n\n(u, v, w)    = ...\ne_kin           = 0.5 * (u^2 + v^2 + w^2)\n\ne_tot        = total_energy(e_kin, geopotential, T, q_tot)\n\ndo timestep   # timestepping loop\n\n  # advance dynamical variables by a timestep (temperature typically\n  # appears in terms on the rhs, such as radiative transfer)\n  advance(u, v, w, ρ, e_tot, q_tot)\n\n  # compute internal energy from dynamic variables\n  e_int = e_tot - 0.5 * (u^2 + v^2 + w^2) - geopotential\n\n  # compute temperature, pressure and condensate specific humidities,\n  T = saturation_adjustment(e_int, ρ, q_tot);\n  q = PhasePartition_equil(T, ρ, q_tot);\n  p = air_pressure(T, ρ, q)\n\nend","category":"page"},{"location":"Common/MoistThermodynamics/#","page":"MoistThermodynamics","title":"MoistThermodynamics","text":"For a dynamical core that additionally uses the liquid and ice specific humidities q.liq and q.ice as prognostic variables, and thus explicitly allows the presence of non-equilibrium phases such as supercooled water, the saturation adjustment in the above workflow is replaced by a direct calculation of temperature and pressure:","category":"page"},{"location":"Common/MoistThermodynamics/#","page":"MoistThermodynamics","title":"MoistThermodynamics","text":"T = air_temperature(e_int, q)\np = air_pressure(T, ρ, q)","category":"page"},{"location":"Common/MoistThermodynamics/#Functions-1","page":"MoistThermodynamics","title":"Functions","text":"","category":"section"},{"location":"Common/MoistThermodynamics/#","page":"MoistThermodynamics","title":"MoistThermodynamics","text":"CurrentModule = CLIMA.MoistThermodynamics","category":"page"},{"location":"Common/MoistThermodynamics/#","page":"MoistThermodynamics","title":"MoistThermodynamics","text":"PhasePartition\nPhasePartition_equil\nThermodynamicState\nPhaseDry\nPhaseEquil\nPhaseNonEquil\nTemperatureSHumEquil\nLiquidIcePotTempSHumEquil\nLiquidIcePotTempSHumNonEquil\nLiquidIcePotTempSHumNonEquil_given_pressure","category":"page"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.PhasePartition","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.PhasePartition","text":"PhasePartition\n\nRepresents the mass fractions of the moist air mixture.\n\nConstructors\n\nPhasePartition(q_tot::Real[, q_liq::Real[, q_ice::Real]])\nPhasePartition(ts::ThermodynamicState)\n\nSee also PhasePartition_equil\n\nFields\n\ntot\ntotal specific humidity\nliq\nliquid water specific humidity (default: 0)\nice\nice specific humidity (default: 0)\n\n\n\n\n\n","category":"type"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.PhasePartition_equil","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.PhasePartition_equil","text":"PhasePartition_equil(T, ρ, q_tot)\n\nPartition the phases in equilibrium, returning a PhasePartition object using the liquid_fraction function where\n\nT temperature\nρ (moist-)air density\nq_tot total specific humidity\n\nThe residual q.tot - q.liq - q.ice is the vapor specific humidity.\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.ThermodynamicState","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.ThermodynamicState","text":"ThermodynamicState{FT}\n\nA thermodynamic state, which can be initialized for various thermodynamic formulations (via its sub-types). All ThermodynamicState's have access to functions to compute all other thermodynamic properties.\n\n\n\n\n\n","category":"type"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.PhaseDry","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.PhaseDry","text":"PhaseDry{FT} <: ThermodynamicState\n\nA dry thermodynamic state (q_tot = 0).\n\nConstructors\n\nPhaseDry(e_int, ρ)\n\nFields\n\nparam_set\nparameter set (e.g., planet parameters)\ne_int\ninternal energy\nρ\ndensity of dry air\n\n\n\n\n\n","category":"type"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.PhaseEquil","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.PhaseEquil","text":"PhaseEquil{FT} <: ThermodynamicState\n\nA thermodynamic state assuming thermodynamic equilibrium (therefore, saturation adjustment may be needed).\n\nConstructors\n\nPhaseEquil(e_int, ρ, q_tot)\n\nFields\n\nparam_set\nparameter set (e.g., planet parameters)\ne_int\ninternal energy\nρ\ndensity of air (potentially moist)\nq_tot\ntotal specific humidity\nT\ntemperature: computed via saturation_adjustment\n\n\n\n\n\n","category":"type"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.PhaseNonEquil","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.PhaseNonEquil","text":"PhaseNonEquil{FT} <: ThermodynamicState\n\nA thermodynamic state assuming thermodynamic non-equilibrium (therefore, temperature can be computed directly).\n\nConstructors\n\nPhaseNonEquil(e_int, q::PhasePartition, ρ)\n\nFields\n\nparam_set\nparameter set (e.g., planet parameters)\ne_int\ninternal energy\nρ\ndensity of air (potentially moist)\nq\nphase partition\n\n\n\n\n\n","category":"type"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.TemperatureSHumEquil","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.TemperatureSHumEquil","text":"TemperatureSHumEquil(T, p, q_tot)\n\nConstructs a PhaseEquil thermodynamic state from temperature.\n\nT temperature\np pressure\nq_tot total specific humidity\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.LiquidIcePotTempSHumEquil","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.LiquidIcePotTempSHumEquil","text":"LiquidIcePotTempSHumEquil(θ_liq_ice, ρ, q_tot)\n\nConstructs a PhaseEquil thermodynamic state from:\n\nθ_liq_ice liquid-ice potential temperature\nρ (moist-)air density\nq_tot total specific humidity\ntol tolerance for saturation adjustment\nmaxiter maximum iterations for saturation adjustment\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.LiquidIcePotTempSHumNonEquil","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.LiquidIcePotTempSHumNonEquil","text":"LiquidIcePotTempSHumNonEquil(θ_liq_ice, ρ, q_pt)\n\nConstructs a PhaseNonEquil thermodynamic state from:\n\nθ_liq_ice liquid-ice potential temperature\nρ (moist-)air density\nq_pt phase partition\n\nand, optionally\n\ntol tolerance for non-linear equation solve\nmaxiter maximum iterations for non-linear equation solve\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.LiquidIcePotTempSHumNonEquil_given_pressure","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.LiquidIcePotTempSHumNonEquil_given_pressure","text":"LiquidIcePotTempSHumNonEquil_given_pressure(θ_liq_ice, p, q_pt)\n\nConstructs a PhaseNonEquil thermodynamic state from:\n\nθ_liq_ice liquid-ice potential temperature\np pressure\nq_pt phase partition\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#","page":"MoistThermodynamics","title":"MoistThermodynamics","text":"air_density\nair_pressure\nair_temperature\nair_temperature_from_liquid_ice_pottemp\ncp_m\ncv_m\ndry_pottemp\nexner\ngas_constant_air\nIce\ninternal_energy\ninternal_energy_sat\nlatent_heat_fusion\nlatent_heat_sublim\nlatent_heat_vapor\nLiquid\nliquid_fraction\nliquid_ice_pottemp\nliquid_ice_pottemp_sat\ngas_constants\nsaturation_adjustment\nsaturation_excess\nq_vap_saturation\nq_vap_saturation_generic\nsaturation_vapor_pressure\nsoundspeed_air\nspecific_volume\ntotal_energy\nvirtual_pottemp","category":"page"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.air_density","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.air_density","text":"air_density(T, p[, q::PhasePartition])\n\nThe (moist-)air density from the equation of state (ideal gas law) where\n\nT air temperature\np pressure\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nair_density(ts::ThermodynamicState)\n\nThe (moist-)air density, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.air_pressure","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.air_pressure","text":"air_pressure(T::FT, T∞::FT, p∞::FT, ::DryAdiabaticProcess)\n\nThe air pressure for an isentropic process, where\n\nT temperature\nT∞ ambient temperature\np∞ ambient pressure\n\n\n\n\n\nair_pressure(T, ρ[, q::PhasePartition])\n\nThe air pressure from the equation of state (ideal gas law) where\n\nT air temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nair_pressure(ts::ThermodynamicState)\n\nThe air pressure from the equation of state (ideal gas law), given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.air_temperature","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.air_temperature","text":"air_temperature(p::FT, θ::FT, Φ::FT, ::DryAdiabaticProcess)\n\nThe air temperature for an isentropic process, where\n\np pressure\nθ potential temperature\n\n\n\n\n\nair_temperature(e_int, q::PhasePartition)\n\nThe air temperature, where\n\ne_int internal energy per unit mass\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nair_temperature(ts::ThermodynamicState)\n\nThe air temperature, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.air_temperature_from_liquid_ice_pottemp","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.air_temperature_from_liquid_ice_pottemp","text":"air_temperature_from_liquid_ice_pottemp(θ_liq_ice, ρ, q::PhasePartition)\n\nThe temperature given\n\nθ_liq_ice liquid-ice potential temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.cp_m","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.cp_m","text":"cp_m([q::PhasePartition])\n\nThe isobaric specific heat capacity of moist air where, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\ncp_m(ts::ThermodynamicState)\n\nThe isobaric specific heat capacity of moist air, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.cv_m","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.cv_m","text":"cv_m([q::PhasePartition])\n\nThe isochoric specific heat capacity of moist air where optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\ncv_m(ts::ThermodynamicState)\n\nThe isochoric specific heat capacity of moist air given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.dry_pottemp","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.dry_pottemp","text":"dry_pottemp(T, ρ[, q::PhasePartition])\n\nThe dry potential temperature where\n\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\n\n\ndry_pottemp(ts::ThermodynamicState)\n\nThe dry potential temperature, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.exner","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.exner","text":"exner(T, ρ[, q::PhasePartition)])\n\nThe Exner function where\n\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nexner(ts::ThermodynamicState)\n\nThe Exner function, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.gas_constant_air","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.gas_constant_air","text":"gas_constant_air([q::PhasePartition])\n\nThe specific gas constant of moist air given\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\ngas_constant_air(ts::ThermodynamicState)\n\nThe specific gas constant of moist air given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.Ice","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.Ice","text":"Ice <: Phase\n\nAn ice phase, to dispatch over saturation_vapor_pressure and q_vap_saturation_generic.\n\n\n\n\n\n","category":"type"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.internal_energy","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.internal_energy","text":"internal_energy(T[, q::PhasePartition])\n\nThe internal energy per unit mass, given a thermodynamic state ts or\n\nT temperature\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\ninternal_energy(ts::ThermodynamicState)\n\nThe internal energy per unit mass, given a thermodynamic state ts.\n\n\n\n\n\ninternal_energy(ρ::FT, ρe::FT, ρu::AbstractVector{FT}, e_pot::FT)\n\nThe internal energy per unit mass, given\n\nρ (moist-)air density\nρe total energy per unit volume\nρu momentum vector\ne_pot potential energy (e.g., gravitational) per unit mass\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.internal_energy_sat","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.internal_energy_sat","text":"internal_energy_sat(T, ρ, q_tot)\n\nThe internal energy per unit mass in thermodynamic equilibrium at saturation where\n\nT temperature\nρ (moist-)air density\nq_tot total specific humidity\n\n\n\n\n\ninternal_energy_sat(ts::ThermodynamicState)\n\nThe internal energy per unit mass in thermodynamic equilibrium at saturation, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.latent_heat_fusion","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.latent_heat_fusion","text":"latent_heat_fusion(T::FT) where {FT<:Real}\n\nThe specific latent heat of fusion where\n\nT temperature\n\n\n\n\n\nlatent_heat_fusion(ts::ThermodynamicState)\n\nThe specific latent heat of fusion given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.latent_heat_sublim","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.latent_heat_sublim","text":"latent_heat_sublim(T::FT) where {FT<:Real}\n\nThe specific latent heat of sublimation where\n\nT temperature\n\n\n\n\n\nlatent_heat_sublim(ts::ThermodynamicState)\n\nThe specific latent heat of sublimation given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.latent_heat_vapor","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.latent_heat_vapor","text":"latent_heat_vapor(T::FT) where {FT<:Real}\n\nThe specific latent heat of vaporization where\n\nT temperature\n\n\n\n\n\nlatent_heat_vapor(ts::ThermodynamicState)\n\nThe specific latent heat of vaporization given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.Liquid","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.Liquid","text":"Liquid <: Phase\n\nA liquid phase, to dispatch over saturation_vapor_pressure and q_vap_saturation_generic.\n\n\n\n\n\n","category":"type"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.liquid_fraction","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.liquid_fraction","text":"liquid_fraction(T[, q::PhasePartition])\n\nThe fraction of condensate that is liquid where\n\nT temperature\nq PhasePartition\n\nIf q.liq or q.ice are nonzero, the liquid fraction is computed from them.\n\nOtherwise, phase equilibrium is assumed so that the fraction of liquid is a function that is 1 above T_freeze and goes to zero below T_freeze.\n\n\n\n\n\nliquid_fraction(ts::ThermodynamicState)\n\nThe fraction of condensate that is liquid given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.liquid_ice_pottemp","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.liquid_ice_pottemp","text":"liquid_ice_pottemp(T, ρ, q::PhasePartition)\n\nThe liquid-ice potential temperature where\n\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nliquid_ice_pottemp(ts::ThermodynamicState)\n\nThe liquid-ice potential temperature, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.liquid_ice_pottemp_sat","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.liquid_ice_pottemp_sat","text":"liquid_ice_pottemp_sat(T, ρ[, q::PhasePartition])\n\nThe saturated liquid ice potential temperature where\n\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nliquid_ice_pottemp_sat(T, ρ, q_tot)\n\nThe saturated liquid ice potential temperature where\n\nT temperature\nρ (moist-)air density\nq_tot total specific humidity\n\n\n\n\n\nliquid_ice_pottemp_sat(ts::ThermodynamicState)\n\nThe liquid potential temperature given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.gas_constants","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.gas_constants","text":"(R_m, cp_m, cv_m, γ_m) = gas_constants([q::PhasePartition])\n\nWrapper to compute all gas constants at once, where optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\nThe function returns a tuple of\n\nR_m gas_constant_air\ncp_m cp_m\ncv_m cv_m\nγ_m = cp_m/cv_m\n\n\n\n\n\n(R_m, cp_m, cv_m, γ_m) = gas_constants(ts::ThermodynamicState)\n\nWrapper to compute all gas constants at once, given a thermodynamic state ts.\n\nThe function returns a tuple of\n\nR_m gas_constant_air\ncp_m cp_m\ncv_m cv_m\nγ_m = cp_m/cv_m\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.saturation_adjustment","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.saturation_adjustment","text":"saturation_adjustment(e_int, ρ, q_tot)\n\nCompute the temperature that is consistent with\n\ne_int internal energy\nρ (moist-)air density\nq_tot total specific humidity\ntol tolerance for non-linear equation solve\nmaxiter maximum iterations for non-linear equation solve\n\nby finding the root of\n\ne_int - internal_energy_sat(Tρq_tot) = 0\n\nusing Newtons method with analytic gradients.\n\nSee also saturation_adjustment.\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.saturation_excess","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.saturation_excess","text":"saturation_excess(T, ρ, q::PhasePartition)\n\nThe saturation excess in equilibrium where\n\nT temperature\nρ (moist-)air density\nq PhasePartition\n\nThe saturation excess is the difference between the total specific humidity q.tot and the saturation specific humidity in equilibrium, and it is defined to be nonzero only if this difference is positive.\n\n\n\n\n\nsaturation_excess(ts::ThermodynamicState)\n\nCompute the saturation excess in equilibrium, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.q_vap_saturation","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.q_vap_saturation","text":"q_vap_saturation(T, ρ[, q::PhasePartition])\n\nCompute the saturation specific humidity, given\n\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition\n\nIf the PhasePartition q is given, the saturation specific humidity is that of a mixture of liquid and ice, computed in a thermodynamically consistent way from the weighted sum of the latent heats of the respective phase transitions (Pressel et al., JAMES, 2015). That is, the saturation vapor pressure and from it the saturation specific humidity are computed from a weighted mean of the latent heats of vaporization and sublimation, with the weights given by the fractions of condensates q.liq/(q.liq + q.ice) and q.ice/(q.liq + q.ice) that are liquid and ice, respectively.\n\nIf the PhasePartition q is not given, or has zero liquid and ice specific humidities, the saturation specific humidity is that over a mixture of liquid and ice, with the fraction of liquid given by temperature dependent liquid_fraction(T) and the fraction of ice by the complement 1 - liquid_fraction(T).\n\n\n\n\n\nq_vap_saturation(ts::ThermodynamicState)\n\nCompute the saturation specific humidity, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.q_vap_saturation_generic","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.q_vap_saturation_generic","text":"q_vap_saturation_generic(T, ρ[; phase=Liquid()])\n\nCompute the saturation specific humidity over a plane surface of condensate, given\n\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nLiquid() indicating condensate is liquid\nIce() indicating condensate is ice\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.saturation_vapor_pressure","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.saturation_vapor_pressure","text":"saturation_vapor_pressure(T, Liquid())\n\nReturn the saturation vapor pressure over a plane liquid surface at temperature T.\n\nsaturation_vapor_pressure(T, Ice())\n\nReturn the saturation vapor pressure over a plane ice surface at temperature T.\n\nsaturation_vapor_pressure(T, LH_0, Δcp)\n\nCompute the saturation vapor pressure over a plane surface by integration of the Clausius-Clapeyron relation.\n\nThe Clausius-Clapeyron relation\n\ndlog(p_v_sat)/dT = [LH_0 + Δcp * (T-T_0)]/(R_v*T^2)\n\nis integrated from the triple point temperature T_triple, using Kirchhoff's relation\n\nL = LH_0 + Δcp * (T - T_0)\n\nfor the specific latent heat L with constant isobaric specific heats of the phases. The linear dependence of the specific latent heat on temperature T allows analytic integration of the Clausius-Clapeyron relation to obtain the saturation vapor pressure p_v_sat as a function of the triple point pressure press_triple.\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.soundspeed_air","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.soundspeed_air","text":"soundspeed_air(T[, q::PhasePartition])\n\nThe speed of sound in unstratified air, where\n\nT temperature\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nsoundspeed_air(ts::ThermodynamicState)\n\nThe speed of sound in unstratified air given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.specific_volume","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.specific_volume","text":"specific_volume(ts::ThermodynamicState)\n\nThe (moist-)air specific volume, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.total_energy","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.total_energy","text":"total_energy(e_kin, e_pot, T[, q::PhasePartition])\n\nThe total energy per unit mass, given\n\ne_kin kinetic energy per unit mass\ne_pot potential energy per unit mass\nT temperature\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\ntotal_energy(e_kin, e_pot, ts::ThermodynamicState)\n\nThe total energy per unit mass given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"Common/MoistThermodynamics/#CLIMA.MoistThermodynamics.virtual_pottemp","page":"MoistThermodynamics","title":"CLIMA.MoistThermodynamics.virtual_pottemp","text":"virtual_pottemp(T, ρ[, q::PhasePartition])\n\nThe virtual temperature where\n\nT temperature\nρ (moist-)air density\n\nand, optionally,\n\nq PhasePartition. Without this argument, the results are for dry air.\n\n\n\n\n\nvirtual_pottemp(ts::ThermodynamicState)\n\nThe virtual potential temperature, given a thermodynamic state ts.\n\n\n\n\n\n","category":"function"},{"location":"#CLIMA-1","page":"Home","title":"CLIMA","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Climate Machine","category":"page"},{"location":"VariableList/#CliMA-Variable-List-1","page":"CliMA Variable List","title":"CliMA Variable List","text":"","category":"section"},{"location":"VariableList/#","page":"CliMA Variable List","title":"CliMA Variable List","text":"This document is currently for collaborators within the project with access to the Overleaf CliMA-Atmos docs. The purpose of this page is to unify the naming conventions used in the Overleaf document in a manner useful for coding. This document suggests 'reserved' variable names in <property>_<species> format with the default working fluid (no-subscript) being moist air. Contributors to the CliMA repository are welcome to suggest changes when necessary.","category":"page"},{"location":"VariableList/#Type-parameters-1","page":"CliMA Variable List","title":"Type parameters","text":"","category":"section"},{"location":"VariableList/#","page":"CliMA Variable List","title":"CliMA Variable List","text":"The Julia code typically uses T as a type parameter, however this conflicts with the typical usage for temperature. Instead, good choices are:","category":"page"},{"location":"VariableList/#","page":"CliMA Variable List","title":"CliMA Variable List","text":"FT for floating point values","category":"page"},{"location":"VariableList/#Names-reserved-for-'use-and-throw'-/-debug-variables-1","page":"CliMA Variable List","title":"Names reserved for 'use and throw' / debug variables","text":"","category":"section"},{"location":"VariableList/#","page":"CliMA Variable List","title":"CliMA Variable List","text":"dummy\nscratch","category":"page"},{"location":"VariableList/#.1-Working-Fluid-and-Equation-of-State-1","page":"CliMA Variable List","title":"2.1  Working Fluid and Equation of State","text":"","category":"section"},{"location":"VariableList/#","page":"CliMA Variable List","title":"CliMA Variable List","text":"q_dry = dry air mass fraction\nq_vap = specific humidity, vapour\nq_liq = specific humidity, liquid\nq_ice = specific humidity, ice\nq_con = specific humidity, condensate\nq_tot = specific humidity, total\n\nP_<species>     = pressure, species (no subscript == default working fluid moist air)\nρ_<species>     = density, species (no subscript == default working fluid moist air)\nR_m             = gas constant, moist\nR_d             = gas constant, dry\nR_v             = gas constant, water vapour\nT               = temperature, moist air\nT_<species>     = temperature, species","category":"page"},{"location":"VariableList/#.2-Mass-Balance-1","page":"CliMA Variable List","title":"2.2 Mass Balance","text":"","category":"section"},{"location":"VariableList/#","page":"CliMA Variable List","title":"CliMA Variable List","text":"dt              = time increment\nu               = x-velocity\nv               = y-velocity\nw               = z-velocity\nU               = x-momentum\nV               = y-momentum\nW               = z=momentum","category":"page"},{"location":"VariableList/#.3-Moisture-balances-1","page":"CliMA Variable List","title":"2.3 Moisture balances","text":"","category":"section"},{"location":"VariableList/#","page":"CliMA Variable List","title":"CliMA Variable List","text":"source_qt           = local source/sink of water mass [S_qt]\ndiffusiveflux_vap   = diffusive flux, water vapour\ndiffusiveflux_liq   = diffusive flux, cloud liquid\ndiffusiveflux_ice   = diffusive flux, cloud ice\ndiffusiveflux_tot   = diffusive flux, total","category":"page"},{"location":"VariableList/#.4-Momentum-balances-1","page":"CliMA Variable List","title":"2.4 Momentum balances","text":"","category":"section"},{"location":"VariableList/#","page":"CliMA Variable List","title":"CliMA Variable List","text":"U               = x-momentum\nV               = y-momentum\nW               = z-momentum (2D/3D: this is the vertical coordinate)\nΩ_x             = x-angular momentum\nΩ_y             = y-angular momentum\nΩ_z             = z-angular momentum\nτ_xx            = stress tensor ((1,1) component)\nτ_<ij>          = replace ij with combination of x/y/z to recover appropriate value\nλ_stokes        = Stokes parameter","category":"page"},{"location":"VariableList/#.5-Energy-balance-1","page":"CliMA Variable List","title":"2.5 Energy balance","text":"","category":"section"},{"location":"VariableList/#","page":"CliMA Variable List","title":"CliMA Variable List","text":"<Lower case e_<type> suggests specific (per unit mass) quantities>\ne_kin_<spe>      = specific energy per unit volume, kinetic\ne_pot_<spe>      = specific energy per unit volume, potential\ne_int_<spe>      = specific energy per unit volume, internal\ne_tot_<spe>      = specific energy per unit volume, total\n\nE_kin_<spe>      = energy, kinetic\nE_pot_<spe>      = energy, potential\nE_int_<spe>      = energy, internal\nE_tot_<spe>      = energy, total\n\ncv_m             = isochoric specific heat, moist air\ncv_d             = isochoric specific heat, dry air\ncv_l             = isochoric specific heat, liquid water\ncv_v             = isochoric specific heat, water vapour\ncv_i             = isochoric specific heat, ice\n\ncp_m             = isobaric specific heat, moist air\ncp_d             = isobaric specific heat, dry air\ncp_l             = isobaric specific heat, liquid water\ncp_v             = isobaric specific heat, water vapour\ncp_i             = isobaric specific heat, ice","category":"page"},{"location":"VariableList/#.6-Microphysics-1","page":"CliMA Variable List","title":"2.6 Microphysics","text":"","category":"section"},{"location":"VariableList/#","page":"CliMA Variable List","title":"CliMA Variable List","text":"q_rai = specific humidity, rain [kg/kg]\n\nterminal_velocity = mass weighted average rain fall speed [m/s]\n\nconv_q_vap_to_q_liq      = tendency to q_liq and q_ice due to\n                           condensation/evaporation and\n                           sublimation/resublimation from q_vap [1/s]\nconv_q_liq_to_q_rai_acnv = tendency to q_rai due to autoconversion from q_liq [1/s]\nconv_q_liq_to_q_rai_accr = tendency to q_rai due to accretion from q_liq [1/s]\nconv_q_rai_to_q_vap      = tendency to q_vap due to evaporation from q_rai [1/s]","category":"page"},{"location":"VariableList/#TODO-1","page":"CliMA Variable List","title":"TODO","text":"","category":"section"},{"location":"VariableList/#","page":"CliMA Variable List","title":"CliMA Variable List","text":"Update with list of additional parameters / source terms as necessary","category":"page"}]
}
